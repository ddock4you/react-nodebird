{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment, Popover } from \"antd\";\nimport Link from \"next/link\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nmoment.locale(\"ko\");\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from \"../reducers/post\";\nimport PostImages from \"../components/PostImages\";\nimport PostCardContent from \"../components/PostCardContent\";\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from \"../reducers/user\";\nconst CardWrapper = styled.div`\n    margin-bottom: 20px;\n`;\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState(\"\");\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(() => {\n    setCommentText(\"\");\n  }, [commentAdded === true]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  const onToggleLike = useCallback(() => {\n    if (!me) {\n      return alert(\"로그인이 필요합니다!\");\n    }\n\n    if (liked) {\n      // 좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  const onRetweet = useCallback(() => {\n    if (!me) return alert(\"로그인이 필요합니다.\");\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me, post.id]);\n  const onFollow = useCallback(userId => () => {\n    dispatch({\n      type: FOLLOW_USER_REQUEST,\n      data: userId\n    });\n  }, []);\n  const onUnfollow = useCallback(userId => () => {\n    dispatch({\n      type: UNFOLLOW_USER_REQUEST,\n      data: userId\n    });\n  }, []);\n  const onRemovePost = useCallback(userId => () => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: userId\n    });\n  }, []);\n  return __jsx(CardWrapper, null, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onRetweet\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: liked ? \"twoTone\" : \"outlined\",\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, null, me && post.UserId === me.id ? __jsx(React.Fragment, null, __jsx(Button, null, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost(post.id)\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, null, \"\\uC2E0\\uACE0\"))\n    }, __jsx(Icon, {\n      type: \"ellipsis\"\n    }))],\n    title: post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null,\n    extra: !me || post.User.id === me.id ? null : me.Followings && me.Followings.find(v => v.id === post.User.id) ? __jsx(Button, {\n      onClick: onUnfollow(post.User.id)\n    }, \"\\uC5B8\\uD314\\uB85C\\uC6B0\") : __jsx(Button, {\n      onClick: onFollow(post.User.id)\n    }, \"\\uD314\\uB85C\\uC6B0\")\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(\"span\", {\n    style: {\n      float: \"right\"\n    }\n  }, moment(post.createdAt).format(\"YYYY.MM.DD.\")), __jsx(Card.Meta, {\n    avatar: // 동적인 라우터일 땐 객체 방식으로 주소를 입력\n    __jsx(Link, {\n      href: {\n        pathname: \"/user\",\n        query: {\n          id: post.Retweet.User.id\n        }\n      },\n      as: `/user/${post.Retweet.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    })\n  })) : __jsx(Card.Meta, {\n    avatar: // 동적인 라우터일 땐 객체 방식으로 주소를 입력\n    __jsx(Link, {\n      href: {\n        pathname: \"/user\",\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    })\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: {\n          pathname: \"/user/\",\n          query: {\n            id: post.User.id\n          }\n        },\n        as: `/user/${post.User.id}`\n      }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n      content: item.content\n    }))\n  })));\n};\n\nexport default PostCard;","map":{"version":3,"sources":["D:/project/react-nodebird/front/containers/PostCard.js"],"names":["React","useState","useCallback","useEffect","Card","Icon","Button","Avatar","Form","Input","List","Comment","Popover","Link","useSelector","useDispatch","styled","moment","locale","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","REMOVE_POST_REQUEST","PostImages","PostCardContent","FOLLOW_USER_REQUEST","UNFOLLOW_USER_REQUEST","CardWrapper","div","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","me","state","user","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onToggleComment","prev","type","data","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","onToggleLike","onRetweet","onFollow","userId","onUnfollow","onRemovePost","Images","UserId","RetweetId","User","nickname","Followings","Retweet","float","createdAt","format","pathname","query","Comments","length","item"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport {\r\n    Card,\r\n    Icon,\r\n    Button,\r\n    Avatar,\r\n    Form,\r\n    Input,\r\n    List,\r\n    Comment,\r\n    Popover\r\n} from \"antd\";\r\nimport Link from \"next/link\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport moment from \"moment\";\r\nmoment.locale(\"ko\");\r\n\r\nimport {\r\n    ADD_COMMENT_REQUEST,\r\n    LOAD_COMMENTS_REQUEST,\r\n    LIKE_POST_REQUEST,\r\n    UNLIKE_POST_REQUEST,\r\n    RETWEET_REQUEST,\r\n    REMOVE_POST_REQUEST\r\n} from \"../reducers/post\";\r\nimport PostImages from \"../components/PostImages\";\r\nimport PostCardContent from \"../components/PostCardContent\";\r\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from \"../reducers/user\";\r\n\r\nconst CardWrapper = styled.div`\r\n    margin-bottom: 20px;\r\n`;\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText, setCommentText] = useState(\"\");\r\n    const { me } = useSelector(state => state.user);\r\n    const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n    const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev);\r\n        if (!commentFormOpened) {\r\n            dispatch({\r\n                type: LOAD_COMMENTS_REQUEST,\r\n                data: post.id\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const onSubmitComment = useCallback(\r\n        e => {\r\n            e.preventDefault();\r\n            if (!me) {\r\n                return alert(\"로그인이 필요합니다.\");\r\n            }\r\n            return dispatch({\r\n                type: ADD_COMMENT_REQUEST,\r\n                data: {\r\n                    postId: post.id,\r\n                    content: commentText\r\n                }\r\n            });\r\n        },\r\n        [me && me.id, commentText]\r\n    );\r\n\r\n    useEffect(() => {\r\n        setCommentText(\"\");\r\n    }, [commentAdded === true]);\r\n\r\n    const onChangeCommentText = useCallback(e => {\r\n        setCommentText(e.target.value);\r\n    }, []);\r\n\r\n    const onToggleLike = useCallback(() => {\r\n        if (!me) {\r\n            return alert(\"로그인이 필요합니다!\");\r\n        }\r\n        if (liked) {\r\n            // 좋아요 누른 상태\r\n            dispatch({\r\n                type: UNLIKE_POST_REQUEST,\r\n                data: post.id\r\n            });\r\n        } else {\r\n            // 좋아요 안 누른 상태\r\n            dispatch({\r\n                type: LIKE_POST_REQUEST,\r\n                data: post.id\r\n            });\r\n        }\r\n    }, [me && me.id, post && post.id, liked]);\r\n\r\n    const onRetweet = useCallback(() => {\r\n        if (!me) return alert(\"로그인이 필요합니다.\");\r\n        return dispatch({\r\n            type: RETWEET_REQUEST,\r\n            data: post.id\r\n        });\r\n    }, [me, post.id]);\r\n\r\n    const onFollow = useCallback(\r\n        userId => () => {\r\n            dispatch({\r\n                type: FOLLOW_USER_REQUEST,\r\n                data: userId\r\n            });\r\n        },\r\n        []\r\n    );\r\n\r\n    const onUnfollow = useCallback(\r\n        userId => () => {\r\n            dispatch({\r\n                type: UNFOLLOW_USER_REQUEST,\r\n                data: userId\r\n            });\r\n        },\r\n        []\r\n    );\r\n\r\n    const onRemovePost = useCallback(\r\n        userId => () => {\r\n            dispatch({\r\n                type: REMOVE_POST_REQUEST,\r\n                data: userId\r\n            });\r\n        },\r\n        []\r\n    );\r\n\r\n    return (\r\n        <CardWrapper>\r\n            <Card\r\n                cover={post.Images[0] && <PostImages images={post.Images} />}\r\n                actions={[\r\n                    <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet} />,\r\n                    <Icon\r\n                        type=\"heart\"\r\n                        key=\"heart\"\r\n                        theme={liked ? \"twoTone\" : \"outlined\"}\r\n                        twoToneColor=\"#eb2f96\"\r\n                        onClick={onToggleLike}\r\n                    />,\r\n                    <Icon\r\n                        type=\"message\"\r\n                        key=\"message\"\r\n                        onClick={onToggleComment}\r\n                    />,\r\n                    <Popover\r\n                        key=\"ellipsis\"\r\n                        content={\r\n                            <Button.Group>\r\n                                {me && post.UserId === me.id ? (\r\n                                    <>\r\n                                        <Button>수정</Button>\r\n                                        <Button\r\n                                            type=\"danger\"\r\n                                            onClick={onRemovePost(post.id)}\r\n                                        >\r\n                                            삭제\r\n                                        </Button>\r\n                                    </>\r\n                                ) : (\r\n                                    <Button>신고</Button>\r\n                                )}\r\n                            </Button.Group>\r\n                        }\r\n                    >\r\n                        <Icon type=\"ellipsis\" />\r\n                    </Popover>\r\n                ]}\r\n                title={\r\n                    post.RetweetId\r\n                        ? `${post.User.nickname}님이 리트윗하셨습니다.`\r\n                        : null\r\n                }\r\n                extra={\r\n                    !me || post.User.id === me.id ? null : me.Followings &&\r\n                      me.Followings.find(v => v.id === post.User.id) ? (\r\n                        <Button onClick={onUnfollow(post.User.id)}>\r\n                            언팔로우\r\n                        </Button>\r\n                    ) : (\r\n                        <Button onClick={onFollow(post.User.id)}>팔로우</Button>\r\n                    )\r\n                }\r\n            >\r\n                {post.RetweetId && post.Retweet ? (\r\n                    <Card\r\n                        cover={\r\n                            post.Retweet.Images[0] && (\r\n                                <PostImages images={post.Retweet.Images} />\r\n                            )\r\n                        }\r\n                    >\r\n                        <span style={{ float: \"right\" }}>\r\n                            {moment(post.createdAt).format(\"YYYY.MM.DD.\")}\r\n                        </span>\r\n                        <Card.Meta\r\n                            avatar={\r\n                                // 동적인 라우터일 땐 객체 방식으로 주소를 입력\r\n                                <Link\r\n                                    href={{\r\n                                        pathname: \"/user\",\r\n                                        query: { id: post.Retweet.User.id }\r\n                                    }}\r\n                                    as={`/user/${post.Retweet.User.id}`}\r\n                                >\r\n                                    <a>\r\n                                        <Avatar>\r\n                                            {post.Retweet.User.nickname[0]}\r\n                                        </Avatar>\r\n                                    </a>\r\n                                </Link>\r\n                            }\r\n                            title={post.Retweet.User.nickname}\r\n                            description={\r\n                                <PostCardContent\r\n                                    postData={post.Retweet.content}\r\n                                />\r\n                            }\r\n                        />\r\n                    </Card>\r\n                ) : (\r\n                    <Card.Meta\r\n                        avatar={\r\n                            // 동적인 라우터일 땐 객체 방식으로 주소를 입력\r\n                            <Link\r\n                                href={{\r\n                                    pathname: \"/user\",\r\n                                    query: { id: post.User.id }\r\n                                }}\r\n                                as={`/user/${post.User.id}`}\r\n                            >\r\n                                <a>\r\n                                    <Avatar>{post.User.nickname[0]}</Avatar>\r\n                                </a>\r\n                            </Link>\r\n                        }\r\n                        title={post.User.nickname}\r\n                        description={\r\n                            <PostCardContent postData={post.content} />\r\n                        }\r\n                    />\r\n                )}\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                    <Form onSubmit={onSubmitComment}>\r\n                        <Form.Item>\r\n                            <Input.TextArea\r\n                                rows={4}\r\n                                value={commentText}\r\n                                onChange={onChangeCommentText}\r\n                            />\r\n                        </Form.Item>\r\n                        <Button\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            loading={isAddingComment}\r\n                        >\r\n                            삐약\r\n                        </Button>\r\n                    </Form>\r\n                    <List\r\n                        header={`${\r\n                            post.Comments ? post.Comments.length : 0\r\n                        } 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments || []}\r\n                        renderItem={item => (\r\n                            <li>\r\n                                <Comment\r\n                                    author={item.User.nickname}\r\n                                    avatar={\r\n                                        <Link\r\n                                            href={{\r\n                                                pathname: \"/user/\",\r\n                                                query: { id: post.User.id }\r\n                                            }}\r\n                                            as={`/user/${post.User.id}`}\r\n                                        >\r\n                                            <a>\r\n                                                <Avatar>\r\n                                                    {item.User.nickname[0]}\r\n                                                </Avatar>\r\n                                            </a>\r\n                                        </Link>\r\n                                    }\r\n                                    content={item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </>\r\n            )}\r\n        </CardWrapper>\r\n    );\r\n};\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n        createdAt: PropTypes.string\r\n    }).isRequired\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}