{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Helmet from \"react-helmet\";\nimport { LOAD_POST_REQUEST } from \"../reducers/post\";\n\nvar Post = function Post(_ref) {\n  var id = _ref.id;\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      singlePost = _useSelector.singlePost;\n\n  return __jsx(React.Fragment, null, __jsx(Helmet, {\n    title: \"\".concat(singlePost.User.nickname, \"\\uB2D8\\uC758 \\uAE00\"),\n    description: singlePost.content,\n    meta: [{\n      name: \"description\",\n      content: singlePost.content\n    }, {\n      property: \"og:title\",\n      content: \"\".concat(singlePost.User.nickname, \"\\uB2D8\\uC758 \\uAC8C\\uC2DC\\uAE00\")\n    }, {\n      property: \"og:description\",\n      content: singlePost.content\n    }, {\n      property: \"og:image\",\n      content: singlePost.Images[0] && \"http://localhost:3065/\".concat(singlePost.Images[0].src)\n    }, {\n      property: \"og:url\",\n      content: \"http://localhost:3060/post/\".concat(id)\n    }]\n  }), __jsx(\"div\", null, singlePost.content), __jsx(\"div\", null, singlePost.User.nickname), __jsx(\"div\", null, singlePost.Images[0] && __jsx(\"img\", {\n    src: \"http://localhost:3060/\".concat(singlePost.Images[0].src)\n  })));\n};\n\nPost.getInitialProps = function _callee(context) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          context.store.dispatch({\n            type: LOAD_POST_REQUEST,\n            data: context.query.id\n          });\n          return _context.abrupt(\"return\", {\n            id: _parseInt(context.query.id, 10)\n          });\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Post;","map":{"version":3,"sources":["D:/project/react-nodebird/front/pages/post.js"],"names":["React","useSelector","Helmet","LOAD_POST_REQUEST","Post","id","state","post","singlePost","User","nickname","content","name","property","Images","src","getInitialProps","context","store","dispatch","type","data","query"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,iBAAT,QAAkC,kBAAlC;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,OAAY;AAAA,MAATC,EAAS,QAATA,EAAS;;AAAA,qBACEJ,WAAW,CAAC,UAAAK,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CADb;AAAA,MACbC,UADa,gBACbA,UADa;;AAErB,SACI,4BACI,MAAC,MAAD;AACI,IAAA,KAAK,YAAKA,UAAU,CAACC,IAAX,CAAgBC,QAArB,wBADT;AAEI,IAAA,WAAW,EAAEF,UAAU,CAACG,OAF5B;AAGI,IAAA,IAAI,EAAE,CACF;AACIC,MAAAA,IAAI,EAAE,aADV;AAEID,MAAAA,OAAO,EAAEH,UAAU,CAACG;AAFxB,KADE,EAKF;AACIE,MAAAA,QAAQ,EAAE,UADd;AAEIF,MAAAA,OAAO,YAAKH,UAAU,CAACC,IAAX,CAAgBC,QAArB;AAFX,KALE,EASF;AACIG,MAAAA,QAAQ,EAAE,gBADd;AAEIF,MAAAA,OAAO,EAAEH,UAAU,CAACG;AAFxB,KATE,EAaF;AACIE,MAAAA,QAAQ,EAAE,UADd;AAEIF,MAAAA,OAAO,EACHH,UAAU,CAACM,MAAX,CAAkB,CAAlB,qCACyBN,UAAU,CAACM,MAAX,CAAkB,CAAlB,EAAqBC,GAD9C;AAHR,KAbE,EAmBF;AACIF,MAAAA,QAAQ,EAAE,QADd;AAEIF,MAAAA,OAAO,uCAAgCN,EAAhC;AAFX,KAnBE;AAHV,IADJ,EA6BI,mBAAMG,UAAU,CAACG,OAAjB,CA7BJ,EA8BI,mBAAMH,UAAU,CAACC,IAAX,CAAgBC,QAAtB,CA9BJ,EA+BI,mBACKF,UAAU,CAACM,MAAX,CAAkB,CAAlB,KACG;AACI,IAAA,GAAG,kCAA2BN,UAAU,CAACM,MAAX,CAAkB,CAAlB,EAAqBC,GAAhD;AADP,IAFR,CA/BJ,CADJ;AAyCH,CA3CD;;AA6CAX,IAAI,CAACY,eAAL,GAAuB,iBAAMC,OAAN;AAAA;AAAA;AAAA;AAAA;AACnBA,UAAAA,OAAO,CAACC,KAAR,CAAcC,QAAd,CAAuB;AACnBC,YAAAA,IAAI,EAAEjB,iBADa;AAEnBkB,YAAAA,IAAI,EAAEJ,OAAO,CAACK,KAAR,CAAcjB;AAFD,WAAvB;AADmB,2CAKZ;AAAEA,YAAAA,EAAE,EAAE,UAASY,OAAO,CAACK,KAAR,CAAcjB,EAAvB,EAA2B,EAA3B;AAAN,WALY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvB;;AAYA,eAAeD,IAAf","sourcesContent":["import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport Helmet from \"react-helmet\";\r\nimport { LOAD_POST_REQUEST } from \"../reducers/post\";\r\n\r\nconst Post = ({ id }) => {\r\n    const { singlePost } = useSelector(state => state.post);\r\n    return (\r\n        <>\r\n            <Helmet\r\n                title={`${singlePost.User.nickname}님의 글`}\r\n                description={singlePost.content}\r\n                meta={[\r\n                    {\r\n                        name: \"description\",\r\n                        content: singlePost.content\r\n                    },\r\n                    {\r\n                        property: \"og:title\",\r\n                        content: `${singlePost.User.nickname}님의 게시글`\r\n                    },\r\n                    {\r\n                        property: \"og:description\",\r\n                        content: singlePost.content\r\n                    },\r\n                    {\r\n                        property: \"og:image\",\r\n                        content:\r\n                            singlePost.Images[0] &&\r\n                            `http://localhost:3065/${singlePost.Images[0].src}`\r\n                    },\r\n                    {\r\n                        property: \"og:url\",\r\n                        content: `http://localhost:3060/post/${id}`\r\n                    }\r\n                ]}\r\n            />\r\n            <div>{singlePost.content}</div>\r\n            <div>{singlePost.User.nickname}</div>\r\n            <div>\r\n                {singlePost.Images[0] && (\r\n                    <img\r\n                        src={`http://localhost:3060/${singlePost.Images[0].src}`}\r\n                    />\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nPost.getInitialProps = async context => {\r\n    context.store.dispatch({\r\n        type: LOAD_POST_REQUEST,\r\n        data: context.query.id\r\n    });\r\n    return { id: parseInt(context.query.id, 10) };\r\n};\r\n\r\nPost.propTypes = {\r\n    id: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}