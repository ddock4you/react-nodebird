{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Helmet from \"react-helmet\";\nimport { LOAD_POST_REQUEST } from \"../reducers/post\";\n\nconst Post = ({\n  id\n}) => {\n  const {\n    singlePost\n  } = useSelector(state => state.post);\n  return __jsx(React.Fragment, null, __jsx(Helmet, {\n    title: `${singlePost.User.nickname}님의 글`,\n    description: singlePost.content,\n    meta: [{\n      name: \"description\",\n      content: singlePost.content\n    }, {\n      property: \"og:title\",\n      content: `${singlePost.User.nickname}님의 게시글`\n    }, {\n      property: \"og:description\",\n      content: singlePost.content\n    }, {\n      property: \"og:image\",\n      content: singlePost.Images[0] && `http://localhost:3065/${singlePost.Images[0].src}`\n    }, {\n      property: \"og:url\",\n      content: `http://localhost:3060/post/${id}`\n    }]\n  }), __jsx(\"div\", null, singlePost.content), __jsx(\"div\", null, singlePost.User.nickname), __jsx(\"div\", null, singlePost.Images[0] && __jsx(\"img\", {\n    src: `http://localhost:3060/${singlePost.Images[0].src}`\n  })));\n};\n\nPost.getInitialProps = async context => {\n  context.store.dispatch({\n    type: LOAD_POST_REQUEST,\n    data: context.query.id\n  });\n  return {\n    id: parseInt(context.query.id, 10)\n  };\n};\n\nexport default Post;","map":{"version":3,"sources":["D:/project/react-nodebird/front/pages/post.js"],"names":["React","useSelector","Helmet","LOAD_POST_REQUEST","Post","id","singlePost","state","post","User","nickname","content","name","property","Images","src","getInitialProps","context","store","dispatch","type","data","query","parseInt"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,iBAAT,QAAkC,kBAAlC;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAY;AACrB,QAAM;AAAEC,IAAAA;AAAF,MAAiBL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAlC;AACA,SACI,4BACI,MAAC,MAAD;AACI,IAAA,KAAK,EAAG,GAAEF,UAAU,CAACG,IAAX,CAAgBC,QAAS,MADvC;AAEI,IAAA,WAAW,EAAEJ,UAAU,CAACK,OAF5B;AAGI,IAAA,IAAI,EAAE,CACF;AACIC,MAAAA,IAAI,EAAE,aADV;AAEID,MAAAA,OAAO,EAAEL,UAAU,CAACK;AAFxB,KADE,EAKF;AACIE,MAAAA,QAAQ,EAAE,UADd;AAEIF,MAAAA,OAAO,EAAG,GAAEL,UAAU,CAACG,IAAX,CAAgBC,QAAS;AAFzC,KALE,EASF;AACIG,MAAAA,QAAQ,EAAE,gBADd;AAEIF,MAAAA,OAAO,EAAEL,UAAU,CAACK;AAFxB,KATE,EAaF;AACIE,MAAAA,QAAQ,EAAE,UADd;AAEIF,MAAAA,OAAO,EACHL,UAAU,CAACQ,MAAX,CAAkB,CAAlB,KACC,yBAAwBR,UAAU,CAACQ,MAAX,CAAkB,CAAlB,EAAqBC,GAAI;AAJ1D,KAbE,EAmBF;AACIF,MAAAA,QAAQ,EAAE,QADd;AAEIF,MAAAA,OAAO,EAAG,8BAA6BN,EAAG;AAF9C,KAnBE;AAHV,IADJ,EA6BI,mBAAMC,UAAU,CAACK,OAAjB,CA7BJ,EA8BI,mBAAML,UAAU,CAACG,IAAX,CAAgBC,QAAtB,CA9BJ,EA+BI,mBACKJ,UAAU,CAACQ,MAAX,CAAkB,CAAlB,KACG;AACI,IAAA,GAAG,EAAG,yBAAwBR,UAAU,CAACQ,MAAX,CAAkB,CAAlB,EAAqBC,GAAI;AAD3D,IAFR,CA/BJ,CADJ;AAyCH,CA3CD;;AA6CAX,IAAI,CAACY,eAAL,GAAuB,MAAMC,OAAN,IAAiB;AACpCA,EAAAA,OAAO,CAACC,KAAR,CAAcC,QAAd,CAAuB;AACnBC,IAAAA,IAAI,EAAEjB,iBADa;AAEnBkB,IAAAA,IAAI,EAAEJ,OAAO,CAACK,KAAR,CAAcjB;AAFD,GAAvB;AAIA,SAAO;AAAEA,IAAAA,EAAE,EAAEkB,QAAQ,CAACN,OAAO,CAACK,KAAR,CAAcjB,EAAf,EAAmB,EAAnB;AAAd,GAAP;AACH,CAND;;AAYA,eAAeD,IAAf","sourcesContent":["import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport Helmet from \"react-helmet\";\r\nimport { LOAD_POST_REQUEST } from \"../reducers/post\";\r\n\r\nconst Post = ({ id }) => {\r\n    const { singlePost } = useSelector(state => state.post);\r\n    return (\r\n        <>\r\n            <Helmet\r\n                title={`${singlePost.User.nickname}님의 글`}\r\n                description={singlePost.content}\r\n                meta={[\r\n                    {\r\n                        name: \"description\",\r\n                        content: singlePost.content\r\n                    },\r\n                    {\r\n                        property: \"og:title\",\r\n                        content: `${singlePost.User.nickname}님의 게시글`\r\n                    },\r\n                    {\r\n                        property: \"og:description\",\r\n                        content: singlePost.content\r\n                    },\r\n                    {\r\n                        property: \"og:image\",\r\n                        content:\r\n                            singlePost.Images[0] &&\r\n                            `http://localhost:3065/${singlePost.Images[0].src}`\r\n                    },\r\n                    {\r\n                        property: \"og:url\",\r\n                        content: `http://localhost:3060/post/${id}`\r\n                    }\r\n                ]}\r\n            />\r\n            <div>{singlePost.content}</div>\r\n            <div>{singlePost.User.nickname}</div>\r\n            <div>\r\n                {singlePost.Images[0] && (\r\n                    <img\r\n                        src={`http://localhost:3060/${singlePost.Images[0].src}`}\r\n                    />\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nPost.getInitialProps = async context => {\r\n    context.store.dispatch({\r\n        type: LOAD_POST_REQUEST,\r\n        data: context.query.id\r\n    });\r\n    return { id: parseInt(context.query.id, 10) };\r\n};\r\n\r\nPost.propTypes = {\r\n    id: PropTypes.number.isRequired\r\n};\r\n\r\nexport default Post;\r\n"]},"metadata":{},"sourceType":"module"}