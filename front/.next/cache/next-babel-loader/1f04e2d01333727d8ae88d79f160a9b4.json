{"ast":null,"code":"import { all, fork, takeLatest, put, throttle, call } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UNLIKE_POST_FAILURE, RETWEET_REQUEST, RETWEET_SUCCESS, RETWEET_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, REMOVE_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_POST_FAILURE } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_TO_ME } from \"../reducers/user\";\n\nfunction addPostAPI(postData) {\n  return axios.post(\"/post\", postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      //post reducer의 데이털르 수정\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      // userreduce의 데이터를 수정\n      type: ADD_POST_TO_ME\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: result.data.id\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI(lastId = 0, limit = 10) {\n  return axios.get(`/posts?lastId=${lastId}&limit=${limit}`);\n}\n\nfunction* loadMainPosts(action) {\n  try {\n    const result = yield call(loadMainPostsAPI, action.lastId);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield throttle(2000, LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n\nfunction loadHashtagPostsAPI(tag, lastId, limit = 10) {\n  return axios.get(`/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}&limit=${limit}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  // console.log(action);\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield throttle(2000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id || 0}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(`/post/images`, formData, {\n    withCredentials: true\n  });\n}\n\nfunction* uploadImages(action) {\n  try {\n    // console.log(action);\n    const result = yield call(uploadImagesAPI, action.data);\n    console.log(\"result iamge\", result.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction likePostAPI(postId) {\n  return axios.post(`/post/${postId}/like`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* likePost(action) {\n  try {\n    // console.log(action);\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    // console.log(action);\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.log(e);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction retweetAPI(postId) {\n  return axios.post(`/post/${postId}/retweet`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* retweet(action) {\n  try {\n    // console.log(action);\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.dir(e);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: e\n    });\n    alert(e.response.data);\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n\nfunction removePostAPI(postId) {\n  return axios.delete(`/post/${postId}`, {\n    withCredentials: true\n  });\n}\n\nfunction* removePost(action) {\n  try {\n    // console.log(action);\n    const result = yield call(removePostAPI, action.data);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_TO_ME,\n      data: result.data\n    });\n  } catch (e) {\n    console.dir(e);\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: e\n    });\n    alert(e.response.data);\n  }\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction loadPostAPI(postId) {\n  return axios.get(`/post/${postId}`);\n}\n\nfunction* loadPost(action) {\n  try {\n    // console.log(action);\n    const result = yield call(loadPostAPI, action.data);\n    yield put({\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchLoadMainPosts), fork(watchAddPost), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet), fork(watchRemovePost), fork(watchLoadPost)]);\n}","map":{"version":3,"sources":["D:/project/react-nodebird/front/sagas/post.js"],"names":["all","fork","takeLatest","put","throttle","call","axios","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","LOAD_POST_REQUEST","LOAD_POST_SUCCESS","LOAD_POST_FAILURE","ADD_POST_TO_ME","REMOVE_POST_TO_ME","addPostAPI","postData","post","withCredentials","addPost","action","result","data","type","e","console","log","id","watchAddPost","loadMainPostsAPI","lastId","limit","get","loadMainPosts","error","watchLoadMainPosts","loadHashtagPostsAPI","tag","encodeURIComponent","loadHashtagPosts","watchLoadHashtagPosts","loadUserPostsAPI","loadUserPosts","watchLoadUserPosts","addCommentAPI","postId","content","addComment","comment","watchAddComment","loadCommentsAPI","loadComments","comments","watchLoadComments","uploadImagesAPI","formData","uploadImages","watchUploadImages","likePostAPI","likePost","userId","watchLikePost","unlikePostAPI","delete","unlikePost","watchUnlikePost","retweetAPI","retweet","dir","alert","response","watchRetweet","removePostAPI","removePost","watchRemovePost","loadPostAPI","loadPost","watchLoadPost","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,QAArC,EAA+CC,IAA/C,QAA2D,oBAA3D;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACIC,gBADJ,EAEIC,gBAFJ,EAGIC,gBAHJ,EAIIC,mBAJJ,EAKIC,mBALJ,EAMIC,mBANJ,EAOIC,qBAPJ,EAQIC,qBARJ,EASIC,qBATJ,EAUIC,uBAVJ,EAWIC,uBAXJ,EAYIC,uBAZJ,EAaIC,0BAbJ,EAcIC,0BAdJ,EAeIC,0BAfJ,EAgBIC,uBAhBJ,EAiBIC,uBAjBJ,EAkBIC,uBAlBJ,EAmBIC,qBAnBJ,EAoBIC,qBApBJ,EAqBIC,qBArBJ,EAsBIC,iBAtBJ,EAuBIC,iBAvBJ,EAwBIC,iBAxBJ,EAyBIC,mBAzBJ,EA0BIC,mBA1BJ,EA2BIC,mBA3BJ,EA4BIC,eA5BJ,EA6BIC,eA7BJ,EA8BIC,eA9BJ,EA+BIC,mBA/BJ,EAgCIC,mBAhCJ,EAiCIC,mBAjCJ,EAkCIC,iBAlCJ,EAmCIC,iBAnCJ,EAoCIC,iBApCJ,QAqCO,kBArCP;AAsCA,SAASC,cAAT,EAAyBC,iBAAzB,QAAkD,kBAAlD;;AAEA,SAASC,UAAT,CAAoBC,QAApB,EAA8B;AAC1B,SAAOxC,KAAK,CAACyC,IAAN,CAAW,OAAX,EAAoBD,QAApB,EAA8B;AACjCE,IAAAA,eAAe,EAAE;AADgB,GAA9B,CAAP;AAGH;;AAED,UAAUC,OAAV,CAAkBC,MAAlB,EAA0B;AACtB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM9C,IAAI,CAACwC,UAAD,EAAaK,MAAM,CAACE,IAApB,CAAzB;AACA,UAAMjD,GAAG,CAAC;AACN;AACAkD,MAAAA,IAAI,EAAE7C,gBAFA;AAGN4C,MAAAA,IAAI,EAAED,MAAM,CAACC;AAHP,KAAD,CAAT;AAKA,UAAMjD,GAAG,CAAC;AACN;AACAkD,MAAAA,IAAI,EAAEV;AAFA,KAAD,CAAT;AAIH,GAXD,CAWE,OAAOW,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,UAAMnD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAE5C,gBADA;AAEN2C,MAAAA,IAAI,EAAED,MAAM,CAACC,IAAP,CAAYK;AAFZ,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUC,YAAV,GAAyB;AACrB,QAAMxD,UAAU,CAACK,gBAAD,EAAmB0C,OAAnB,CAAhB;AACH;;AAED,SAASU,gBAAT,CAA0BC,MAAM,GAAG,CAAnC,EAAsCC,KAAK,GAAG,EAA9C,EAAkD;AAC9C,SAAOvD,KAAK,CAACwD,GAAN,CAAW,iBAAgBF,MAAO,UAASC,KAAM,EAAjD,CAAP;AACH;;AAED,UAAUE,aAAV,CAAwBb,MAAxB,EAAgC;AAC5B,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM9C,IAAI,CAACsD,gBAAD,EAAmBT,MAAM,CAACU,MAA1B,CAAzB;AACA,UAAMzD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAEpC,uBADA;AAENmC,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOE,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACS,KAAR,CAAcV,CAAd;AACA,UAAMnD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAEnC,uBADA;AAEN8C,MAAAA,KAAK,EAAEV;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUW,kBAAV,GAA+B;AAC3B,QAAM7D,QAAQ,CAAC,IAAD,EAAOY,uBAAP,EAAgC+C,aAAhC,CAAd;AACH;;AAED,SAASG,mBAAT,CAA6BC,GAA7B,EAAkCP,MAAlC,EAA0CC,KAAK,GAAG,EAAlD,EAAsD;AAClD,SAAOvD,KAAK,CAACwD,GAAN,CACF,YAAWM,kBAAkB,CAACD,GAAD,CAAM,WAAUP,MAAO,UAASC,KAAM,EADjE,CAAP;AAGH;;AAED,UAAUQ,gBAAV,CAA2BnB,MAA3B,EAAmC;AAC/B;AACA,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM9C,IAAI,CACrB6D,mBADqB,EAErBhB,MAAM,CAACE,IAFc,EAGrBF,MAAM,CAACU,MAHc,CAAzB;AAKA,UAAMzD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAEjC,0BADA;AAENgC,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAVD,CAUE,OAAOE,CAAP,EAAU;AACR,UAAMnD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAEhC,0BADA;AAEN2C,MAAAA,KAAK,EAAEV;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUgB,qBAAV,GAAkC;AAC9B,QAAMlE,QAAQ,CAAC,IAAD,EAAOe,0BAAP,EAAmCkD,gBAAnC,CAAd;AACH;;AAED,SAASE,gBAAT,CAA0Bd,EAA1B,EAA8B;AAC1B,SAAOnD,KAAK,CAACwD,GAAN,CAAW,SAAQL,EAAE,IAAI,CAAE,QAA3B,CAAP;AACH;;AAED,UAAUe,aAAV,CAAwBtB,MAAxB,EAAgC;AAC5B,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM9C,IAAI,CAACkE,gBAAD,EAAmBrB,MAAM,CAACE,IAA1B,CAAzB;AACA,UAAMjD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAE9B,uBADA;AAEN6B,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAND,CAME,OAAOE,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACS,KAAR,CAAcV,CAAd;AACA,UAAMnD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAE7B,uBADA;AAENwC,MAAAA,KAAK,EAAEV;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUmB,kBAAV,GAA+B;AAC3B,QAAMvE,UAAU,CAACoB,uBAAD,EAA0BkD,aAA1B,CAAhB;AACH;;AAED,SAASE,aAAT,CAAuBtB,IAAvB,EAA6B;AACzB,SAAO9C,KAAK,CAACyC,IAAN,CACF,SAAQK,IAAI,CAACuB,MAAO,UADlB,EAEH;AAAEC,IAAAA,OAAO,EAAExB,IAAI,CAACwB;AAAhB,GAFG,EAGH;AACI5B,IAAAA,eAAe,EAAE;AADrB,GAHG,CAAP;AAOH;;AAED,UAAU6B,UAAV,CAAqB3B,MAArB,EAA6B;AACzB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM9C,IAAI,CAACqE,aAAD,EAAgBxB,MAAM,CAACE,IAAvB,CAAzB;AACA,UAAMjD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAE1C,mBADA;AAENyC,MAAAA,IAAI,EAAE;AACFuB,QAAAA,MAAM,EAAEzB,MAAM,CAACE,IAAP,CAAYuB,MADlB;AAEFG,QAAAA,OAAO,EAAE3B,MAAM,CAACC;AAFd;AAFA,KAAD,CAAT;AAOH,GATD,CASE,OAAOE,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACS,KAAR,CAAcV,CAAd;AACA,UAAMnD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAEzC,mBADA;AAENoD,MAAAA,KAAK,EAAEV;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUyB,eAAV,GAA4B;AACxB,QAAM7E,UAAU,CAACQ,mBAAD,EAAsBmE,UAAtB,CAAhB;AACH;;AAED,SAASG,eAAT,CAAyBL,MAAzB,EAAiC;AAC7B,SAAOrE,KAAK,CAACwD,GAAN,CAAW,SAAQa,MAAO,WAA1B,CAAP;AACH;;AAED,UAAUM,YAAV,CAAuB/B,MAAvB,EAA+B;AAC3B,MAAI;AACA,UAAMC,MAAM,GAAG,MAAM9C,IAAI,CAAC2E,eAAD,EAAkB9B,MAAM,CAACE,IAAzB,CAAzB;AACA,UAAMjD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAEvC,qBADA;AAENsC,MAAAA,IAAI,EAAE;AACFuB,QAAAA,MAAM,EAAEzB,MAAM,CAACE,IADb;AAEF8B,QAAAA,QAAQ,EAAE/B,MAAM,CAACC;AAFf;AAFA,KAAD,CAAT;AAOH,GATD,CASE,OAAOE,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,UAAMnD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAEtC,qBADA;AAENiD,MAAAA,KAAK,EAAEV;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAU6B,iBAAV,GAA8B;AAC1B,QAAMjF,UAAU,CAACW,qBAAD,EAAwBoE,YAAxB,CAAhB;AACH;;AAED,SAASG,eAAT,CAAyBC,QAAzB,EAAmC;AAC/B,SAAO/E,KAAK,CAACyC,IAAN,CAAY,cAAZ,EAA2BsC,QAA3B,EAAqC;AACxCrC,IAAAA,eAAe,EAAE;AADuB,GAArC,CAAP;AAGH;;AAED,UAAUsC,YAAV,CAAuBpC,MAAvB,EAA+B;AAC3B,MAAI;AACA;AACA,UAAMC,MAAM,GAAG,MAAM9C,IAAI,CAAC+E,eAAD,EAAkBlC,MAAM,CAACE,IAAzB,CAAzB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,MAAM,CAACC,IAAnC;AACA,UAAMjD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAE3B,qBADA;AAEN0B,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GARD,CAQE,OAAOE,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,UAAMnD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAE1B,qBADA;AAENqC,MAAAA,KAAK,EAAEV;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUiC,iBAAV,GAA8B;AAC1B,QAAMrF,UAAU,CAACuB,qBAAD,EAAwB6D,YAAxB,CAAhB;AACH;;AAED,SAASE,WAAT,CAAqBb,MAArB,EAA6B;AACzB,SAAOrE,KAAK,CAACyC,IAAN,CACF,SAAQ4B,MAAO,OADb,EAEH,EAFG,EAGH;AACI3B,IAAAA,eAAe,EAAE;AADrB,GAHG,CAAP;AAOH;;AAED,UAAUyC,QAAV,CAAmBvC,MAAnB,EAA2B;AACvB,MAAI;AACA;AACA,UAAMC,MAAM,GAAG,MAAM9C,IAAI,CAACmF,WAAD,EAActC,MAAM,CAACE,IAArB,CAAzB;AACA,UAAMjD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAExB,iBADA;AAENuB,MAAAA,IAAI,EAAE;AACFuB,QAAAA,MAAM,EAAEzB,MAAM,CAACE,IADb;AAEFsC,QAAAA,MAAM,EAAEvC,MAAM,CAACC,IAAP,CAAYsC;AAFlB;AAFA,KAAD,CAAT;AAOH,GAVD,CAUE,OAAOpC,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,UAAMnD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAEvB,iBADA;AAENkC,MAAAA,KAAK,EAAEV;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUqC,aAAV,GAA0B;AACtB,QAAMzF,UAAU,CAAC0B,iBAAD,EAAoB6D,QAApB,CAAhB;AACH;;AAED,SAASG,aAAT,CAAuBjB,MAAvB,EAA+B;AAC3B,SAAOrE,KAAK,CAACuF,MAAN,CAAc,SAAQlB,MAAO,OAA7B,EAAqC;AACxC3B,IAAAA,eAAe,EAAE;AADuB,GAArC,CAAP;AAGH;;AAED,UAAU8C,UAAV,CAAqB5C,MAArB,EAA6B;AACzB,MAAI;AACA;AACA,UAAMC,MAAM,GAAG,MAAM9C,IAAI,CAACuF,aAAD,EAAgB1C,MAAM,CAACE,IAAvB,CAAzB;AACA,UAAMjD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAErB,mBADA;AAENoB,MAAAA,IAAI,EAAE;AACFuB,QAAAA,MAAM,EAAEzB,MAAM,CAACE,IADb;AAEFsC,QAAAA,MAAM,EAAEvC,MAAM,CAACC,IAAP,CAAYsC;AAFlB;AAFA,KAAD,CAAT;AAOH,GAVD,CAUE,OAAOpC,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,UAAMnD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAEpB,mBADA;AAEN+B,MAAAA,KAAK,EAAEV;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUyC,eAAV,GAA4B;AACxB,QAAM7F,UAAU,CAAC6B,mBAAD,EAAsB+D,UAAtB,CAAhB;AACH;;AAED,SAASE,UAAT,CAAoBrB,MAApB,EAA4B;AACxB,SAAOrE,KAAK,CAACyC,IAAN,CACF,SAAQ4B,MAAO,UADb,EAEH,EAFG,EAGH;AACI3B,IAAAA,eAAe,EAAE;AADrB,GAHG,CAAP;AAOH;;AAED,UAAUiD,OAAV,CAAkB/C,MAAlB,EAA0B;AACtB,MAAI;AACA;AACA,UAAMC,MAAM,GAAG,MAAM9C,IAAI,CAAC2F,UAAD,EAAa9C,MAAM,CAACE,IAApB,CAAzB;AACA,UAAMjD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAElB,eADA;AAENiB,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOE,CAAP,EAAU;AACRC,IAAAA,OAAO,CAAC2C,GAAR,CAAY5C,CAAZ;AACA,UAAMnD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAEjB,eADA;AAEN4B,MAAAA,KAAK,EAAEV;AAFD,KAAD,CAAT;AAIA6C,IAAAA,KAAK,CAAC7C,CAAC,CAAC8C,QAAF,CAAWhD,IAAZ,CAAL;AACH;AACJ;;AAED,UAAUiD,YAAV,GAAyB;AACrB,QAAMnG,UAAU,CAACgC,eAAD,EAAkB+D,OAAlB,CAAhB;AACH;;AAED,SAASK,aAAT,CAAuB3B,MAAvB,EAA+B;AAC3B,SAAOrE,KAAK,CAACuF,MAAN,CAAc,SAAQlB,MAAO,EAA7B,EAAgC;AACnC3B,IAAAA,eAAe,EAAE;AADkB,GAAhC,CAAP;AAGH;;AAED,UAAUuD,UAAV,CAAqBrD,MAArB,EAA6B;AACzB,MAAI;AACA;AACA,UAAMC,MAAM,GAAG,MAAM9C,IAAI,CAACiG,aAAD,EAAgBpD,MAAM,CAACE,IAAvB,CAAzB;AACA,UAAMjD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAEf,mBADA;AAENc,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIA,UAAMjD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAET,iBADA;AAENQ,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAXD,CAWE,OAAOE,CAAP,EAAU;AACRC,IAAAA,OAAO,CAAC2C,GAAR,CAAY5C,CAAZ;AACA,UAAMnD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAEd,mBADA;AAENyB,MAAAA,KAAK,EAAEV;AAFD,KAAD,CAAT;AAIA6C,IAAAA,KAAK,CAAC7C,CAAC,CAAC8C,QAAF,CAAWhD,IAAZ,CAAL;AACH;AACJ;;AAED,UAAUoD,eAAV,GAA4B;AACxB,QAAMtG,UAAU,CAACmC,mBAAD,EAAsBkE,UAAtB,CAAhB;AACH;;AAED,SAASE,WAAT,CAAqB9B,MAArB,EAA6B;AACzB,SAAOrE,KAAK,CAACwD,GAAN,CAAW,SAAQa,MAAO,EAA1B,CAAP;AACH;;AAED,UAAU+B,QAAV,CAAmBxD,MAAnB,EAA2B;AACvB,MAAI;AACA;AACA,UAAMC,MAAM,GAAG,MAAM9C,IAAI,CAACoG,WAAD,EAAcvD,MAAM,CAACE,IAArB,CAAzB;AACA,UAAMjD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAEZ,iBADA;AAENW,MAAAA,IAAI,EAAED,MAAM,CAACC;AAFP,KAAD,CAAT;AAIH,GAPD,CAOE,OAAOE,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACS,KAAR,CAAcV,CAAd;AACA,UAAMnD,GAAG,CAAC;AACNkD,MAAAA,IAAI,EAAEX,iBADA;AAENsB,MAAAA,KAAK,EAAEV;AAFD,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUqD,aAAV,GAA0B;AACtB,QAAMzG,UAAU,CAACsC,iBAAD,EAAoBkE,QAApB,CAAhB;AACH;;AAED,eAAe,UAAUE,QAAV,GAAqB;AAChC,QAAM5G,GAAG,CAAC,CACNC,IAAI,CAACgE,kBAAD,CADE,EAENhE,IAAI,CAACyD,YAAD,CAFE,EAGNzD,IAAI,CAAC8E,eAAD,CAHE,EAIN9E,IAAI,CAACkF,iBAAD,CAJE,EAKNlF,IAAI,CAACqE,qBAAD,CALE,EAMNrE,IAAI,CAACwE,kBAAD,CANE,EAONxE,IAAI,CAACsF,iBAAD,CAPE,EAQNtF,IAAI,CAAC0F,aAAD,CARE,EASN1F,IAAI,CAAC8F,eAAD,CATE,EAUN9F,IAAI,CAACoG,YAAD,CAVE,EAWNpG,IAAI,CAACuG,eAAD,CAXE,EAYNvG,IAAI,CAAC0G,aAAD,CAZE,CAAD,CAAT;AAcH","sourcesContent":["import { all, fork, takeLatest, put, throttle, call } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\nimport {\r\n    ADD_POST_REQUEST,\r\n    ADD_POST_SUCCESS,\r\n    ADD_POST_FAILURE,\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE,\r\n    LOAD_COMMENTS_REQUEST,\r\n    LOAD_COMMENTS_SUCCESS,\r\n    LOAD_COMMENTS_FAILURE,\r\n    LOAD_MAIN_POSTS_REQUEST,\r\n    LOAD_MAIN_POSTS_SUCCESS,\r\n    LOAD_MAIN_POSTS_FAILURE,\r\n    LOAD_HASHTAG_POSTS_REQUEST,\r\n    LOAD_HASHTAG_POSTS_SUCCESS,\r\n    LOAD_HASHTAG_POSTS_FAILURE,\r\n    LOAD_USER_POSTS_REQUEST,\r\n    LOAD_USER_POSTS_SUCCESS,\r\n    LOAD_USER_POSTS_FAILURE,\r\n    UPLOAD_IMAGES_REQUEST,\r\n    UPLOAD_IMAGES_SUCCESS,\r\n    UPLOAD_IMAGES_FAILURE,\r\n    LIKE_POST_REQUEST,\r\n    LIKE_POST_SUCCESS,\r\n    LIKE_POST_FAILURE,\r\n    UNLIKE_POST_REQUEST,\r\n    UNLIKE_POST_SUCCESS,\r\n    UNLIKE_POST_FAILURE,\r\n    RETWEET_REQUEST,\r\n    RETWEET_SUCCESS,\r\n    RETWEET_FAILURE,\r\n    REMOVE_POST_REQUEST,\r\n    REMOVE_POST_SUCCESS,\r\n    REMOVE_POST_FAILURE,\r\n    LOAD_POST_REQUEST,\r\n    LOAD_POST_SUCCESS,\r\n    LOAD_POST_FAILURE\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_TO_ME } from \"../reducers/user\";\r\n\r\nfunction addPostAPI(postData) {\r\n    return axios.post(\"/post\", postData, {\r\n        withCredentials: true\r\n    });\r\n}\r\n\r\nfunction* addPost(action) {\r\n    try {\r\n        const result = yield call(addPostAPI, action.data);\r\n        yield put({\r\n            //post reducer의 데이털르 수정\r\n            type: ADD_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n        yield put({\r\n            // userreduce의 데이터를 수정\r\n            type: ADD_POST_TO_ME\r\n        });\r\n    } catch (e) {\r\n        console.log(e);\r\n        yield put({\r\n            type: ADD_POST_FAILURE,\r\n            data: result.data.id\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction loadMainPostsAPI(lastId = 0, limit = 10) {\r\n    return axios.get(`/posts?lastId=${lastId}&limit=${limit}`);\r\n}\r\n\r\nfunction* loadMainPosts(action) {\r\n    try {\r\n        const result = yield call(loadMainPostsAPI, action.lastId);\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LOAD_MAIN_POSTS_FAILURE,\r\n            error: e\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadMainPosts() {\r\n    yield throttle(2000, LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\r\n}\r\n\r\nfunction loadHashtagPostsAPI(tag, lastId, limit = 10) {\r\n    return axios.get(\r\n        `/hashtag/${encodeURIComponent(tag)}?lastId=${lastId}&limit=${limit}`\r\n    );\r\n}\r\n\r\nfunction* loadHashtagPosts(action) {\r\n    // console.log(action);\r\n    try {\r\n        const result = yield call(\r\n            loadHashtagPostsAPI,\r\n            action.data,\r\n            action.lastId\r\n        );\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (e) {\r\n        yield put({\r\n            type: LOAD_HASHTAG_POSTS_FAILURE,\r\n            error: e\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadHashtagPosts() {\r\n    yield throttle(2000, LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\r\n}\r\n\r\nfunction loadUserPostsAPI(id) {\r\n    return axios.get(`/user/${id || 0}/posts`);\r\n}\r\n\r\nfunction* loadUserPosts(action) {\r\n    try {\r\n        const result = yield call(loadUserPostsAPI, action.data);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LOAD_USER_POSTS_FAILURE,\r\n            error: e\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadUserPosts() {\r\n    yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n    return axios.post(\r\n        `/post/${data.postId}/comment`,\r\n        { content: data.content },\r\n        {\r\n            withCredentials: true\r\n        }\r\n    );\r\n}\r\n\r\nfunction* addComment(action) {\r\n    try {\r\n        const result = yield call(addCommentAPI, action.data);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: {\r\n                postId: action.data.postId,\r\n                comment: result.data\r\n            }\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            error: e\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction loadCommentsAPI(postId) {\r\n    return axios.get(`/post/${postId}/comments`);\r\n}\r\n\r\nfunction* loadComments(action) {\r\n    try {\r\n        const result = yield call(loadCommentsAPI, action.data);\r\n        yield put({\r\n            type: LOAD_COMMENTS_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                comments: result.data\r\n            }\r\n        });\r\n    } catch (e) {\r\n        console.log(e);\r\n        yield put({\r\n            type: LOAD_COMMENTS_FAILURE,\r\n            error: e\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadComments() {\r\n    yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\r\n}\r\n\r\nfunction uploadImagesAPI(formData) {\r\n    return axios.post(`/post/images`, formData, {\r\n        withCredentials: true\r\n    });\r\n}\r\n\r\nfunction* uploadImages(action) {\r\n    try {\r\n        // console.log(action);\r\n        const result = yield call(uploadImagesAPI, action.data);\r\n        console.log(\"result iamge\", result.data);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (e) {\r\n        console.log(e);\r\n        yield put({\r\n            type: UPLOAD_IMAGES_FAILURE,\r\n            error: e\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchUploadImages() {\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\r\n}\r\n\r\nfunction likePostAPI(postId) {\r\n    return axios.post(\r\n        `/post/${postId}/like`,\r\n        {},\r\n        {\r\n            withCredentials: true\r\n        }\r\n    );\r\n}\r\n\r\nfunction* likePost(action) {\r\n    try {\r\n        // console.log(action);\r\n        const result = yield call(likePostAPI, action.data);\r\n        yield put({\r\n            type: LIKE_POST_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                userId: result.data.userId\r\n            }\r\n        });\r\n    } catch (e) {\r\n        console.log(e);\r\n        yield put({\r\n            type: LIKE_POST_FAILURE,\r\n            error: e\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLikePost() {\r\n    yield takeLatest(LIKE_POST_REQUEST, likePost);\r\n}\r\n\r\nfunction unlikePostAPI(postId) {\r\n    return axios.delete(`/post/${postId}/like`, {\r\n        withCredentials: true\r\n    });\r\n}\r\n\r\nfunction* unlikePost(action) {\r\n    try {\r\n        // console.log(action);\r\n        const result = yield call(unlikePostAPI, action.data);\r\n        yield put({\r\n            type: UNLIKE_POST_SUCCESS,\r\n            data: {\r\n                postId: action.data,\r\n                userId: result.data.userId\r\n            }\r\n        });\r\n    } catch (e) {\r\n        console.log(e);\r\n        yield put({\r\n            type: UNLIKE_POST_FAILURE,\r\n            error: e\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchUnlikePost() {\r\n    yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\r\n}\r\n\r\nfunction retweetAPI(postId) {\r\n    return axios.post(\r\n        `/post/${postId}/retweet`,\r\n        {},\r\n        {\r\n            withCredentials: true\r\n        }\r\n    );\r\n}\r\n\r\nfunction* retweet(action) {\r\n    try {\r\n        // console.log(action);\r\n        const result = yield call(retweetAPI, action.data);\r\n        yield put({\r\n            type: RETWEET_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (e) {\r\n        console.dir(e);\r\n        yield put({\r\n            type: RETWEET_FAILURE,\r\n            error: e\r\n        });\r\n        alert(e.response.data);\r\n    }\r\n}\r\n\r\nfunction* watchRetweet() {\r\n    yield takeLatest(RETWEET_REQUEST, retweet);\r\n}\r\n\r\nfunction removePostAPI(postId) {\r\n    return axios.delete(`/post/${postId}`, {\r\n        withCredentials: true\r\n    });\r\n}\r\n\r\nfunction* removePost(action) {\r\n    try {\r\n        // console.log(action);\r\n        const result = yield call(removePostAPI, action.data);\r\n        yield put({\r\n            type: REMOVE_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n        yield put({\r\n            type: REMOVE_POST_TO_ME,\r\n            data: result.data\r\n        });\r\n    } catch (e) {\r\n        console.dir(e);\r\n        yield put({\r\n            type: REMOVE_POST_FAILURE,\r\n            error: e\r\n        });\r\n        alert(e.response.data);\r\n    }\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n    yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction loadPostAPI(postId) {\r\n    return axios.get(`/post/${postId}`);\r\n}\r\n\r\nfunction* loadPost(action) {\r\n    try {\r\n        // console.log(action);\r\n        const result = yield call(loadPostAPI, action.data);\r\n        yield put({\r\n            type: LOAD_POST_SUCCESS,\r\n            data: result.data\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type: LOAD_POST_FAILURE,\r\n            error: e\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadPost() {\r\n    yield takeLatest(LOAD_POST_REQUEST, loadPost);\r\n}\r\n\r\nexport default function* postSaga() {\r\n    yield all([\r\n        fork(watchLoadMainPosts),\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchLoadComments),\r\n        fork(watchLoadHashtagPosts),\r\n        fork(watchLoadUserPosts),\r\n        fork(watchUploadImages),\r\n        fork(watchLikePost),\r\n        fork(watchUnlikePost),\r\n        fork(watchRetweet),\r\n        fork(watchRemovePost),\r\n        fork(watchLoadPost)\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}