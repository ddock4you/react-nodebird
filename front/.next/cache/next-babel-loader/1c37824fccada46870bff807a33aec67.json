{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport Head from \"next/head\";\nimport Proptypes from \"prop-types\";\nimport withRedux from \"next-redux-wrapper\";\nimport withReduxSaga from \"next-redux-saga\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport axios from \"axios\";\nimport Helmet from \"react-helmet\"; // import App from 'next/app';\n\nimport AppLayout from \"../components/AppLayout\";\nimport reducer from \"../reducers\";\nimport rootSaga from \"../sagas\";\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\n\nvar Nodebird = function Nodebird(_ref) {\n  var Component = _ref.Component,\n      store = _ref.store,\n      pageProps = _ref.pageProps;\n  // console.log(pageProps);\n  return __jsx(Provider, {\n    store: store\n  }, __jsx(Helmet, {\n    title: \"NodeBird\",\n    htmlAttributes: {\n      lang: \"ko\"\n    },\n    meta: [{\n      charset: \"UTF-8\"\n    }, {\n      name: \"viewport\",\n      content: \"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=yes,viewport-fit=cover\"\n    }, {\n      \"http-equiv\": \"X-UA-Compatible\",\n      content: \"IE=edge\"\n    }, {\n      name: \"description\",\n      content: \"팥우유의 NodeBird SNS\"\n    }, {\n      name: \"og:title\",\n      content: \"NodeBird\"\n    }, {\n      name: \"og:description\",\n      content: \"팥우유의 NodeBird SNS\"\n    }, {\n      property: \"og:type\",\n      content: \"website\"\n    }, {\n      property: \"og:image\",\n      content: \"http://localhost:3000/favicon.ico\"\n    }],\n    link: [{\n      rel: \"shortcut icon\",\n      href: \"/favicon.ico\"\n    }, {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.25.3/antd.css\"\n    }, {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"\n    }, {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"\n    }]\n  }), __jsx(AppLayout, null, __jsx(Component, pageProps)));\n};\n\nNodebird.propTypes = {\n  Component: Proptypes.elementType.isRequired,\n  store: Proptypes.object.isRequired,\n  pageProps: Proptypes.object.isRequired\n}; // getInitialProps\n// next에서 지원하는 react의 라이프 사이클같은 기능\n// 서버에서 받은 동적인 데이터를 프론트에서 사용할 수 있음.\n// react componentDidMount보다 더 빨리 실행됨.\n// 서버에서도 실행됨.\n// 서버 사이드 렌더링 작업을 할 때 용이함.\n\nNodebird.getInitialProps = function _callee(context) {\n  var ctx, Component, pageProps, state, cookie;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          //context -> next에서 내려주는 것\n          // console.log(context);\n          ctx = context.ctx, Component = context.Component;\n          pageProps = {}; // store 안에 있는 로그인 정보를 getState 메서드를 통해 가져올 수 있음.\n\n          state = ctx.store.getState(); // 클라이언트 -> 백엔드 서버간 통신할 땐 브라우저가 쿠키를 챙겨주나\n          // 서버와 서버간 통신일 땐 ex)프론트 서버(서버사이드 렌더링) - 백엔드 서버\n          // 개발자가 직접 쿠키를 전달해줘야 한다.\n\n          cookie = ctx.isServer ? ctx.req.headers.cookie : \"\"; // console.log('쿠키', cookie);\n          // axios를 통해 프론트 서버에서 백엔드 서버로 쿠키를 직접 전달\n          //\n\n          if (ctx.isServer && cookie) {\n            axios.defaults.headers.Cookie = cookie;\n          }\n\n          if (!state.user.me) {\n            ctx.store.dispatch({\n              type: LOAD_USER_REQUEST\n            });\n          }\n\n          if (!Component.getInitialProps) {\n            _context.next = 13;\n            break;\n          }\n\n          _context.next = 9;\n          return _regeneratorRuntime.awrap(Component.getInitialProps(ctx));\n\n        case 9:\n          _context.t0 = _context.sent;\n\n          if (_context.t0) {\n            _context.next = 12;\n            break;\n          }\n\n          _context.t0 = {};\n\n        case 12:\n          pageProps = _context.t0;\n\n        case 13:\n          return _context.abrupt(\"return\", {\n            pageProps: pageProps\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nvar configStore = function configStore(initialState, options) {\n  var sagaMiddleware = createSagaMiddleware();\n  var middlewares = [sagaMiddleware, function (store) {\n    return function (next) {\n      return function (action) {\n        // console.log(action);\n        next(action);\n      };\n    };\n  }];\n  var enhancer = false ? compose(applyMiddleware.apply(void 0, middlewares)) : compose( // middleware끼리 합성\n  applyMiddleware.apply(void 0, middlewares), !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\" // chrome redux devtools 사용 코드\n  ? window.__REDUX_DEVTOOLS_EXTENSION__() : function (f) {\n    return f;\n  });\n  var store = createStore(reducer, initialState, enhancer); // next에서 redux-saga를 이용해 서버사이드 렌더링을 가능하게 해주는 코드\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}; // next-redux-saga -> next 서버에서 redux-saga를 사용할 수 있게 해주는 플러그인\n// next-redux-saga 설치 후 모든 프론트영역을 감싸는 코드영역의 export 코드를 감싸준다(고차 컴포넌트)\n// 고차 컴포넌트\n\n\nexport default withRedux(configStore)(withReduxSaga(Nodebird));","map":null,"metadata":{},"sourceType":"module"}