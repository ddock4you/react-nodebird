{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { Button, Form, Input } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\n\nvar CommentForm = function CommentForm(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(\"\"),\n      commentText = _useState[0],\n      setCommentText = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector.commentAdded,\n      isAddingComment = _useSelector.isAddingComment;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector2.me;\n\n  var dispatch = useDispatch();\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(function () {\n    setCommentText(\"\");\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\"));\n};\n\nexport default CommentForm;","map":{"version":3,"sources":["D:/project/react-nodebird/front/components/CommentForm.js"],"names":["React","useState","useCallback","useEffect","Button","Form","Input","useSelector","useDispatch","ADD_COMMENT_REQUEST","CommentForm","post","commentText","setCommentText","state","commentAdded","isAddingComment","user","me","dispatch","onSubmitComment","e","preventDefault","alert","type","data","postId","id","content","onChangeCommentText","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,MAApC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA,SAASC,mBAAT,QAAoC,kBAApC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBACQV,QAAQ,CAAC,EAAD,CADhB;AAAA,MACvBW,WADuB;AAAA,MACVC,cADU;;AAAA,qBAEYN,WAAW,CAAC,UAAAO,KAAK;AAAA,WAAIA,KAAK,CAACH,IAAV;AAAA,GAAN,CAFvB;AAAA,MAEtBI,YAFsB,gBAEtBA,YAFsB;AAAA,MAERC,eAFQ,gBAERA,eAFQ;;AAAA,sBAGfT,WAAW,CAAC,UAAAO,KAAK;AAAA,WAAIA,KAAK,CAACG,IAAV;AAAA,GAAN,CAHI;AAAA,MAGtBC,EAHsB,iBAGtBA,EAHsB;;AAI9B,MAAMC,QAAQ,GAAGX,WAAW,EAA5B;AAEA,MAAMY,eAAe,GAAGlB,WAAW,CAC/B,UAAAmB,CAAC,EAAI;AACDA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI,CAACJ,EAAL,EAAS;AACL,aAAOK,KAAK,CAAC,aAAD,CAAZ;AACH;;AACD,WAAOJ,QAAQ,CAAC;AACZK,MAAAA,IAAI,EAAEf,mBADM;AAEZgB,MAAAA,IAAI,EAAE;AACFC,QAAAA,MAAM,EAAEf,IAAI,CAACgB,EADX;AAEFC,QAAAA,OAAO,EAAEhB;AAFP;AAFM,KAAD,CAAf;AAOH,GAb8B,EAc/B,CAACM,EAAE,IAAIA,EAAE,CAACS,EAAV,EAAcf,WAAd,CAd+B,CAAnC;AAiBAT,EAAAA,SAAS,CAAC,YAAM;AACZU,IAAAA,cAAc,CAAC,EAAD,CAAd;AACH,GAFQ,EAEN,CAACE,YAAY,KAAK,IAAlB,CAFM,CAAT;AAIA,MAAMc,mBAAmB,GAAG3B,WAAW,CAAC,UAAAmB,CAAC,EAAI;AACzCR,IAAAA,cAAc,CAACQ,CAAC,CAACS,MAAF,CAASC,KAAV,CAAd;AACH,GAFsC,EAEpC,EAFoC,CAAvC;AAIA,SACI,MAAC,IAAD;AAAM,IAAA,QAAQ,EAAEX;AAAhB,KACI,MAAC,IAAD,CAAM,IAAN,QACI,MAAC,KAAD,CAAO,QAAP;AACI,IAAA,IAAI,EAAE,CADV;AAEI,IAAA,KAAK,EAAER,WAFX;AAGI,IAAA,QAAQ,EAAEiB;AAHd,IADJ,CADJ,EAQI,MAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAyC,IAAA,OAAO,EAAEb;AAAlD,oBARJ,CADJ;AAcH,CA7CD;;AAmDA,eAAeN,WAAf","sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport { Button, Form, Input } from \"antd\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\r\n\r\nconst CommentForm = ({ post }) => {\r\n    const [commentText, setCommentText] = useState(\"\");\r\n    const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n    const { me } = useSelector(state => state.user);\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmitComment = useCallback(\r\n        e => {\r\n            e.preventDefault();\r\n            if (!me) {\r\n                return alert(\"로그인이 필요합니다.\");\r\n            }\r\n            return dispatch({\r\n                type: ADD_COMMENT_REQUEST,\r\n                data: {\r\n                    postId: post.id,\r\n                    content: commentText\r\n                }\r\n            });\r\n        },\r\n        [me && me.id, commentText]\r\n    );\r\n\r\n    useEffect(() => {\r\n        setCommentText(\"\");\r\n    }, [commentAdded === true]);\r\n\r\n    const onChangeCommentText = useCallback(e => {\r\n        setCommentText(e.target.value);\r\n    }, []);\r\n\r\n    return (\r\n        <Form onSubmit={onSubmitComment}>\r\n            <Form.Item>\r\n                <Input.TextArea\r\n                    rows={4}\r\n                    value={commentText}\r\n                    onChange={onChangeCommentText}\r\n                />\r\n            </Form.Item>\r\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>\r\n                삐약\r\n            </Button>\r\n        </Form>\r\n    );\r\n};\r\n\r\nCommentForm.propTypes = {\r\n    post: PropTypes.object.isRequired\r\n};\r\n\r\nexport default CommentForm;\r\n"]},"metadata":{},"sourceType":"module"}