{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { Avatar, Card } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\nimport { LOAD_USER_POSTS_REQUEST } from \"../reducers/post\";\nimport PostCard from \"../containers/PostCard\";\n\nconst User = () => {\n  const {\n    mainPosts\n  } = useSelector(state => state.post);\n  const {\n    me,\n    userInfo\n  } = useSelector(state => state.user);\n  console.log(me, userInfo);\n  return __jsx(\"div\", null, userInfo ? __jsx(Card, {\n    actions: [__jsx(\"div\", {\n      key: \"twit\"\n    }, \"\\uC9F9\\uC9F9\", __jsx(\"br\", null), userInfo.Posts.length), __jsx(\"div\", {\n      key: \"following\"\n    }, \"\\uD314\\uB85C\\uC789\", __jsx(\"br\", null), userInfo.Followings.length), __jsx(\"div\", {\n      key: \"follower\"\n    }, \"\\uD314\\uB85C\\uC6B0\", __jsx(\"br\", null), userInfo.Followers.length)]\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, null, userInfo.nickname[0]),\n    title: userInfo.nickname\n  })) : null, mainPosts.map(c => __jsx(PostCard, {\n    key: +c.id,\n    post: c\n  })));\n};\n\nUser.getInitialProps = async context => {\n  console.log(\"hashag getInitialProps\", context.query.id); // props로도 전달 가능!\n\n  const id = parseInt(context.query.id, 10);\n  context.store.dispatch({\n    type: LOAD_USER_REQUEST,\n    data: id\n  });\n  context.store.dispatch({\n    type: LOAD_USER_POSTS_REQUEST,\n    data: id\n  });\n  return {\n    id\n  };\n};\n\nexport default User;","map":{"version":3,"sources":["D:/project/react-nodebird/front/pages/user.js"],"names":["React","useEffect","Avatar","Card","useDispatch","useSelector","LOAD_USER_REQUEST","LOAD_USER_POSTS_REQUEST","PostCard","User","mainPosts","state","post","me","userInfo","user","console","log","Posts","length","Followings","Followers","nickname","map","c","id","getInitialProps","context","query","parseInt","store","dispatch","type","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,MAA7B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAASC,uBAAT,QAAwC,kBAAxC;AACA,OAAOC,QAAP,MAAqB,wBAArB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAM;AAAEC,IAAAA;AAAF,MAAgBL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,IAAhB,CAAjC;AACA,QAAM;AAAEC,IAAAA,EAAF;AAAMC,IAAAA;AAAN,MAAmBT,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACI,IAAhB,CAApC;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,EAAZ,EAAgBC,QAAhB;AACA,SACI,mBACKA,QAAQ,GACL,MAAC,IAAD;AACI,IAAA,OAAO,EAAE,CACL;AAAK,MAAA,GAAG,EAAC;AAAT,uBAEI,iBAFJ,EAGKA,QAAQ,CAACI,KAAT,CAAeC,MAHpB,CADK,EAML;AAAK,MAAA,GAAG,EAAC;AAAT,6BAEI,iBAFJ,EAGKL,QAAQ,CAACM,UAAT,CAAoBD,MAHzB,CANK,EAWL;AAAK,MAAA,GAAG,EAAC;AAAT,6BAEI,iBAFJ,EAGKL,QAAQ,CAACO,SAAT,CAAmBF,MAHxB,CAXK;AADb,KAmBI,MAAC,IAAD,CAAM,IAAN;AACI,IAAA,MAAM,EAAE,MAAC,MAAD,QAASL,QAAQ,CAACQ,QAAT,CAAkB,CAAlB,CAAT,CADZ;AAEI,IAAA,KAAK,EAAER,QAAQ,CAACQ;AAFpB,IAnBJ,CADK,GAyBL,IA1BR,EA2BKZ,SAAS,CAACa,GAAV,CAAcC,CAAC,IACZ,MAAC,QAAD;AAAU,IAAA,GAAG,EAAE,CAACA,CAAC,CAACC,EAAlB;AAAsB,IAAA,IAAI,EAAED;AAA5B,IADH,CA3BL,CADJ;AAiCH,CAtCD;;AA4CAf,IAAI,CAACiB,eAAL,GAAuB,MAAMC,OAAN,IAAiB;AACpCX,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCU,OAAO,CAACC,KAAR,CAAcH,EAApD,EADoC,CAEpC;;AACA,QAAMA,EAAE,GAAGI,QAAQ,CAACF,OAAO,CAACC,KAAR,CAAcH,EAAf,EAAmB,EAAnB,CAAnB;AACAE,EAAAA,OAAO,CAACG,KAAR,CAAcC,QAAd,CAAuB;AACnBC,IAAAA,IAAI,EAAE1B,iBADa;AAEnB2B,IAAAA,IAAI,EAAER;AAFa,GAAvB;AAIAE,EAAAA,OAAO,CAACG,KAAR,CAAcC,QAAd,CAAuB;AACnBC,IAAAA,IAAI,EAAEzB,uBADa;AAEnB0B,IAAAA,IAAI,EAAER;AAFa,GAAvB;AAIA,SAAO;AAAEA,IAAAA;AAAF,GAAP;AACH,CAbD;;AAeA,eAAehB,IAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Avatar, Card } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\r\nimport { LOAD_USER_POSTS_REQUEST } from \"../reducers/post\";\r\nimport PostCard from \"../containers/PostCard\";\r\n\r\nconst User = () => {\r\n    const { mainPosts } = useSelector(state => state.post);\r\n    const { me, userInfo } = useSelector(state => state.user);\r\n\r\n    console.log(me, userInfo);\r\n    return (\r\n        <div>\r\n            {userInfo ? (\r\n                <Card\r\n                    actions={[\r\n                        <div key=\"twit\">\r\n                            짹짹\r\n                            <br />\r\n                            {userInfo.Posts.length}\r\n                        </div>,\r\n                        <div key=\"following\">\r\n                            팔로잉\r\n                            <br />\r\n                            {userInfo.Followings.length}\r\n                        </div>,\r\n                        <div key=\"follower\">\r\n                            팔로우\r\n                            <br />\r\n                            {userInfo.Followers.length}\r\n                        </div>\r\n                    ]}\r\n                >\r\n                    <Card.Meta\r\n                        avatar={<Avatar>{userInfo.nickname[0]}</Avatar>}\r\n                        title={userInfo.nickname}\r\n                    />\r\n                </Card>\r\n            ) : null}\r\n            {mainPosts.map(c => (\r\n                <PostCard key={+c.id} post={c} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nUser.propTypes = {\r\n    id: PropTypes.number.isRequired\r\n};\r\n\r\nUser.getInitialProps = async context => {\r\n    console.log(\"hashag getInitialProps\", context.query.id);\r\n    // props로도 전달 가능!\r\n    const id = parseInt(context.query.id, 10);\r\n    context.store.dispatch({\r\n        type: LOAD_USER_REQUEST,\r\n        data: id\r\n    });\r\n    context.store.dispatch({\r\n        type: LOAD_USER_POSTS_REQUEST,\r\n        data: id\r\n    });\r\n    return { id };\r\n};\r\n\r\nexport default User;\r\n"]},"metadata":{},"sourceType":"module"}