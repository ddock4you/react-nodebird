{"ast":null,"code":"import produce from \"immer\";\nexport const initialState = {\n  mainPosts: [],\n  // 화면에 보일 포스트들\n  imagePaths: [],\n  // 미리보기 이미지 경로\n  addPostErrorReason: false,\n  // 포스트 업로드 실패 사유\n  isAddingPost: false,\n  // 포스트 업로드 중\n  postAdded: false,\n  // 포스트 업로드 성공\n  isAddingComment: false,\n  addCommentErrorReason: \"\",\n  commentAdded: false,\n  singlePost: null\n};\nexport const LOAD_MAIN_POSTS_REQUEST = \"LOAD_MAIN_POSTS_REQUEST\";\nexport const LOAD_MAIN_POSTS_SUCCESS = \"LOAD_MAIN_POSTS_SUCCESS\";\nexport const LOAD_MAIN_POSTS_FAILURE = \"LOAD_MAIN_POSTS_FAILURE\";\nexport const LOAD_HASHTAG_POSTS_REQUEST = \"LOAD_HASHTAG_POSTS_REQUEST\";\nexport const LOAD_HASHTAG_POSTS_SUCCESS = \"LOAD_HASHTAG_POSTS_SUCCESS\";\nexport const LOAD_HASHTAG_POSTS_FAILURE = \"LOAD_HASHTAG_POSTS_FAILURE\";\nexport const LOAD_USER_POSTS_REQUEST = \"LOAD_USER_POSTS_REQUEST\";\nexport const LOAD_USER_POSTS_SUCCESS = \"LOAD_USER_POSTS_SUCCESS\";\nexport const LOAD_USER_POSTS_FAILURE = \"LOAD_USER_POSTS_FAILURE\";\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\";\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport const LOAD_COMMENTS_REQUEST = \"LOAD_COMMENTS_REQUEST\";\nexport const LOAD_COMMENTS_SUCCESS = \"LOAD_COMMENTS_SUCCESS\";\nexport const LOAD_COMMENTS_FAILURE = \"LOAD_COMMENTS_FAILURE\";\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const LOAD_POST_REQUEST = \"LOAD_POST_REQUEST\";\nexport const LOAD_POST_SUCCESS = \"LOAD_POST_SUCCESS\";\nexport const LOAD_POST_FAILURE = \"LOAD_POST_FAILURE\";\nexport default ((state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case UPLOAD_IMAGES_REQUEST:\n        {\n          break; // return {\n          //     ...state\n          // };\n        }\n\n      case UPLOAD_IMAGES_SUCCESS:\n        {\n          action.data.forEach(p => {\n            draft.imagePaths.push(p);\n          }); // draft 또다른 표현 방법\n          // draft.imagePaths = draft.imagePaths.concat(action.data);\n\n          break; // return {\n          //     ...state,\n          //     imagePaths: [...state.imagePaths, ...action.data]\n          // };\n        }\n\n      case UPLOAD_IMAGES_FAILURE:\n        {\n          break; // return {\n          //     ...state\n          // };\n        }\n\n      case REMOVE_IMAGE:\n        {\n          const index = draft.imagePaths.findIndex((v, i) => action.index);\n          draft.imagePaths = splice(index, 1);\n          break; // return {\n          //     ...state,\n          //     imagePaths: state.imagePaths.filter(\n          //         (v, i) => i !== action.index\n          //     )\n          // };\n        }\n\n      case ADD_POST_REQUEST:\n        {\n          draft.isAddingPost = true, draft.addPostErrorReason = \"\", draft.Added = false;\n          break; // return {\n          //     ...state,\n          //     isAddingPost: true,\n          //     addPostErrorReason: \"\",\n          //     postAdded: false\n          // };\n        }\n\n      case ADD_POST_SUCCESS:\n        {\n          draft.isAddingPost = false;\n          draft.mainPosts.unshift(action.data);\n          draft.postAdded = true;\n          draft.imagePaths = [];\n          break; // return {\n          //     ...state,\n          //     isAddingPost: false,\n          //     mainPosts: [action.data, ...state.mainPosts],\n          //     postAdded: true,\n          //     imagePaths: []\n          // };\n        }\n\n      case ADD_POST_FAILURE:\n        {\n          draft.isAddingPost = false;\n          draft.addPostErrorReason = action.error;\n          break; // return {\n          //     ...state,\n          //     isAddingPost: false,\n          //     addPostErrorReason: action.error\n          // };\n        }\n\n      case ADD_COMMENT_REQUEST:\n        {\n          draft.isAddingComment = true;\n          draft.addCommentErrorReason = \"\";\n          draft.commentAdded = false;\n          break; // return {\n          //     ...state,\n          //     isAddingComment: true,\n          //     addCommentErrorReason: \"\",\n          //     commentAdded: false\n          // };\n        }\n\n      case ADD_COMMENT_SUCCESS:\n        {\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n          draft.mainPosts[postIndex].Comments.push(action.data.comment);\n          draft.isAddingComment = false;\n          draft.commentAdded = true;\n          break; // const postIndex = state.mainPosts.findIndex(\n          //     v => v.id === action.data.postId\n          // );\n          // const post = state.mainPosts[postIndex];\n          // const Comments = [...post.Comments, action.data.comment];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = { ...post, Comments };\n          // return {\n          //     ...state,\n          //     isAddingComment: false,\n          //     mainPosts,\n          //     commentAdded: true\n          // };\n        }\n\n      case ADD_COMMENT_FAILURE:\n        {\n          draft.isAddingComment = false;\n          draft.addCommentErrorReason = action.error; // return {\n          //     ...state,\n          //     isAddingComment: false,\n          //     addCommentErrorReason: action.error\n          // };\n        }\n\n      case LOAD_COMMENTS_SUCCESS:\n        {\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n          draft.mainPosts[postIndex].Comments = action.data.comments;\n          break; // const postIndex = state.mainPosts.findIndex(\n          //     v => v.id === action.data.postId\n          // );\n          // const post = state.mainPosts[postIndex];\n          // const Comments = action.data.comments;\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = { ...post, Comments };\n          // return {\n          //     ...state,\n          //     mainPosts\n          // };\n        }\n      // a\n\n      case LOAD_MAIN_POSTS_REQUEST:\n      case LOAD_HASHTAG_POSTS_REQUEST:\n      case LOAD_USER_POSTS_REQUEST:\n        {\n          draft.mainPosts = !action.lastId ? [] : state.mainPosts;\n          draft.hasMorePost = action.lastId ? state.hasMorePost : true;\n          break; // return {\n          //     ...state,\n          //     // 페이지 처음 들어왔을 땐 초기화하고 기존 게시글 보고 있는\n          //     // 상태에서 스크롤 내릴 땐 기존 게시글들 유지\n          //     mainPosts: action.lastId === 0 ? [] : state.mainPosts,\n          //     hasMorePost: action.lastId ? state.hasMorePost : true\n          // };\n        }\n\n      case LOAD_MAIN_POSTS_SUCCESS:\n      case LOAD_HASHTAG_POSTS_SUCCESS:\n      case LOAD_USER_POSTS_SUCCESS:\n        {\n          action.data.forEach(d => {\n            draft.mainPosts.push(d);\n          });\n          draft.hasMorePost = action.data.length === 10;\n          break; // return {\n          //     ...state,\n          //     mainPosts: state.mainPosts.concat(action.data),\n          //     hasMorePost: action.data.length === 10 // 스크롤을 더 활성화할지 말지 결정\n          // };\n        }\n\n      case LOAD_MAIN_POSTS_FAILURE:\n      case LOAD_HASHTAG_POSTS_FAILURE:\n      case LOAD_USER_POSTS_FAILURE:\n        {\n          break;\n        }\n\n      case LIKE_POST_REQUEST:\n        {\n          break;\n        }\n\n      case LIKE_POST_SUCCESS:\n        {\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n          draft.mainPosts[postIndex].Likers.unshift({\n            id: action.data.userId\n          });\n          break; // const postIndex = state.mainPosts.findIndex(\n          //     v => v.id === action.data.postId\n          // );\n          // const post = state.mainPosts[postIndex];\n          // const Likers = [{ id: action.data.userId }, ...post.Likers];\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = { ...post, Likers };\n          // return {\n          //     ...state,\n          //     mainPosts\n          // };\n        }\n\n      case LIKE_POST_FAILURE:\n        {\n          break; // return {\n          //     ...state\n          // };\n        }\n\n      case UNLIKE_POST_REQUEST:\n        {\n          break; // return {\n          //     ...state\n          // };\n        }\n\n      case UNLIKE_POST_SUCCESS:\n        {\n          const postIndex = draft.mainPosts.findIndex(v => v.id === action.data.postId);\n          const likeIndex = draft.mainPosts[postIndex].Likers.findIndex(v => v.id === action.data.userId);\n          draft.mainPosts[postIndex].Likers.splice(likeIndex, 1); // const postIndex = state.mainPosts.findIndex(\n          //     v => v.id === action.data.postId\n          // );\n          // const post = state.mainPosts[postIndex];\n          // const Likers = post.Likers.filter(\n          //     v => v.id !== action.data.userId\n          // );\n          // const mainPosts = [...state.mainPosts];\n          // mainPosts[postIndex] = { ...post, Likers };\n          // return {\n          //     ...state,\n          //     mainPosts\n          // };\n        }\n\n      case UNLIKE_POST_FAILURE:\n        {\n          break; // return {\n          //     ...state\n          // };\n        }\n\n      case RETWEET_REQUEST:\n        {\n          break; // return {\n          //     ...state\n          // };\n        }\n\n      case RETWEET_SUCCESS:\n        {\n          draft.mainPosts = draft.mainPosts.unshift(action.data);\n          break; // return {\n          //     ...state,\n          //     mainPosts: [action.data, ...state.mainPosts]\n          // };\n        }\n\n      case RETWEET_FAILURE:\n        {\n          break; // return {\n          //     ...state\n          // };\n        }\n\n      case REMOVE_POST_REQUEST:\n        {// return {\n          //     ...state\n          // };\n        }\n\n      case REMOVE_POST_SUCCESS:\n        {\n          const index = draft.mainPosts.findIndex(v => v.id === action.data);\n          draft.mainPosts.splice(index, 1); // return {\n          //     ...state,\n          //     mainPosts: state.mainPosts.filter(v => v.id !== action.data)\n          // };\n        }\n\n      case REMOVE_POST_FAILURE:\n        {\n          break; // return {\n          //     ...state\n          // };\n        }\n\n      case LOAD_POST_SUCCESS:\n        {\n          draft.singlePost = action.data;\n          break;\n        }\n\n      default:\n        {\n          break; // return {\n          //     ...state\n          // };\n        }\n    }\n  });\n}); // export default reducer;","map":null,"metadata":{},"sourceType":"module"}