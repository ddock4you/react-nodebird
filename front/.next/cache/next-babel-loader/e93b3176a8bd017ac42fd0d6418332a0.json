{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect, memo, useRef } from \"react\";\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment, Popover } from \"antd\";\nimport Link from \"next/link\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\nimport moment from \"moment\";\nmoment.locale(\"ko\");\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, RETWEET_REQUEST, REMOVE_POST_REQUEST } from \"../reducers/post\";\nimport PostImages from \"../components/PostImages\";\nimport PostCardContent from \"../components/PostCardContent\";\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from \"../reducers/user\";\nimport CommentForm from \"../components/CommentForm\";\nimport FollowButton from \"../components/FollowButton\";\nconst CardWrapper = styled.div`\n    margin-bottom: 20px;\n`;\nconst PostCard = memo(({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const id = useSelector(state => state.user.me && state.user.me.id);\n  const dispatch = useDispatch();\n  const liked = id && post.Likers && post.Likers.find(v => v.id === id);\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  const postMemory = useRef(id);\n  console.log(\"id\", id);\n  useEffect(() => {\n    console.log(\"post useEffect\", postMemory.current, postMemory.current === id);\n  }, [post]);\n  const onToggleLike = useCallback(() => {\n    if (!id) {\n      return alert(\"로그인이 필요합니다!\");\n    }\n\n    if (liked) {\n      // 좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [id, post && post.id, liked]);\n  const onRetweet = useCallback(() => {\n    if (!id) return alert(\"로그인이 필요합니다.\");\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [id, post.id]);\n  const onFollow = useCallback(userId => () => {\n    dispatch({\n      type: FOLLOW_USER_REQUEST,\n      data: userId\n    });\n  }, []);\n  const onUnfollow = useCallback(userId => () => {\n    dispatch({\n      type: UNFOLLOW_USER_REQUEST,\n      data: userId\n    });\n  }, []);\n  const onRemovePost = useCallback(userId => () => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: userId\n    });\n  }, []);\n  return __jsx(CardWrapper, null, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onRetweet\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: liked ? \"twoTone\" : \"outlined\",\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, null, id && post.UserId === id ? __jsx(React.Fragment, null, __jsx(Button, null, \"\\uC218\\uC815\"), __jsx(Button, {\n        type: \"danger\",\n        onClick: onRemovePost(post.id)\n      }, \"\\uC0AD\\uC81C\")) : __jsx(Button, null, \"\\uC2E0\\uACE0\"))\n    }, __jsx(Icon, {\n      type: \"ellipsis\"\n    }))],\n    title: post.RetweetId ? `${post.User.nickname}님이 리트윗하셨습니다.` : null,\n    extra: __jsx(FollowButton, {\n      post: post,\n      onUnfollow: onUnfollow,\n      onFollow: onFollow\n    })\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(\"span\", {\n    style: {\n      float: \"right\"\n    }\n  }, moment(post.createdAt).format(\"YYYY.MM.DD.\")), __jsx(Card.Meta, {\n    avatar: // 동적인 라우터일 땐 객체 방식으로 주소를 입력\n    __jsx(Link, {\n      href: {\n        pathname: \"/user\",\n        query: {\n          id: post.Retweet.User.id\n        }\n      },\n      as: `/user/${post.Retweet.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    })\n  })) : __jsx(Card.Meta, {\n    avatar: // 동적인 라우터일 땐 객체 방식으로 주소를 입력\n    __jsx(Link, {\n      href: {\n        pathname: \"/user\",\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    })\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(CommentForm, {\n    post: post\n  }), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0} 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: {\n          pathname: \"/user/\",\n          query: {\n            id: post.User.id\n          }\n        },\n        as: `/user/${post.User.id}`\n      }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n      content: item.content\n    }))\n  })));\n});\nexport default PostCard;","map":{"version":3,"sources":["D:/project/react-nodebird/front/containers/PostCard.js"],"names":["React","useState","useCallback","useEffect","memo","useRef","Card","Icon","Button","Avatar","Form","Input","List","Comment","Popover","Link","useSelector","useDispatch","styled","moment","locale","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","RETWEET_REQUEST","REMOVE_POST_REQUEST","PostImages","PostCardContent","FOLLOW_USER_REQUEST","UNFOLLOW_USER_REQUEST","CommentForm","FollowButton","CardWrapper","div","PostCard","post","commentFormOpened","setCommentFormOpened","id","state","user","me","dispatch","liked","Likers","find","v","onToggleComment","prev","type","data","postMemory","console","log","current","onToggleLike","alert","onRetweet","onFollow","userId","onUnfollow","onRemovePost","Images","UserId","RetweetId","User","nickname","Retweet","float","createdAt","format","pathname","query","content","Comments","length","item"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect, memo, useRef } from \"react\";\r\nimport {\r\n    Card,\r\n    Icon,\r\n    Button,\r\n    Avatar,\r\n    Form,\r\n    Input,\r\n    List,\r\n    Comment,\r\n    Popover\r\n} from \"antd\";\r\nimport Link from \"next/link\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport styled from \"styled-components\";\r\nimport moment from \"moment\";\r\nmoment.locale(\"ko\");\r\n\r\nimport {\r\n    ADD_COMMENT_REQUEST,\r\n    LOAD_COMMENTS_REQUEST,\r\n    LIKE_POST_REQUEST,\r\n    UNLIKE_POST_REQUEST,\r\n    RETWEET_REQUEST,\r\n    REMOVE_POST_REQUEST\r\n} from \"../reducers/post\";\r\nimport PostImages from \"../components/PostImages\";\r\nimport PostCardContent from \"../components/PostCardContent\";\r\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from \"../reducers/user\";\r\nimport CommentForm from \"../components/CommentForm\";\r\nimport FollowButton from \"../components/FollowButton\";\r\n\r\nconst CardWrapper = styled.div`\r\n    margin-bottom: 20px;\r\n`;\r\n\r\nconst PostCard = memo(({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n\r\n    const id = useSelector(state => state.user.me && state.user.me.id);\r\n    const dispatch = useDispatch();\r\n    const liked = id && post.Likers && post.Likers.find(v => v.id === id);\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        setCommentFormOpened(prev => !prev);\r\n        if (!commentFormOpened) {\r\n            dispatch({\r\n                type: LOAD_COMMENTS_REQUEST,\r\n                data: post.id\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const postMemory = useRef(id);\r\n\r\n    console.log(\"id\", id);\r\n    useEffect(() => {\r\n        console.log(\r\n            \"post useEffect\",\r\n            postMemory.current,\r\n            postMemory.current === id\r\n        );\r\n    }, [post]);\r\n\r\n    const onToggleLike = useCallback(() => {\r\n        if (!id) {\r\n            return alert(\"로그인이 필요합니다!\");\r\n        }\r\n        if (liked) {\r\n            // 좋아요 누른 상태\r\n            dispatch({\r\n                type: UNLIKE_POST_REQUEST,\r\n                data: post.id\r\n            });\r\n        } else {\r\n            // 좋아요 안 누른 상태\r\n            dispatch({\r\n                type: LIKE_POST_REQUEST,\r\n                data: post.id\r\n            });\r\n        }\r\n    }, [id, post && post.id, liked]);\r\n\r\n    const onRetweet = useCallback(() => {\r\n        if (!id) return alert(\"로그인이 필요합니다.\");\r\n        return dispatch({\r\n            type: RETWEET_REQUEST,\r\n            data: post.id\r\n        });\r\n    }, [id, post.id]);\r\n\r\n    const onFollow = useCallback(\r\n        userId => () => {\r\n            dispatch({\r\n                type: FOLLOW_USER_REQUEST,\r\n                data: userId\r\n            });\r\n        },\r\n        []\r\n    );\r\n\r\n    const onUnfollow = useCallback(\r\n        userId => () => {\r\n            dispatch({\r\n                type: UNFOLLOW_USER_REQUEST,\r\n                data: userId\r\n            });\r\n        },\r\n        []\r\n    );\r\n\r\n    const onRemovePost = useCallback(\r\n        userId => () => {\r\n            dispatch({\r\n                type: REMOVE_POST_REQUEST,\r\n                data: userId\r\n            });\r\n        },\r\n        []\r\n    );\r\n\r\n    return (\r\n        <CardWrapper>\r\n            <Card\r\n                cover={post.Images[0] && <PostImages images={post.Images} />}\r\n                actions={[\r\n                    <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet} />,\r\n                    <Icon\r\n                        type=\"heart\"\r\n                        key=\"heart\"\r\n                        theme={liked ? \"twoTone\" : \"outlined\"}\r\n                        twoToneColor=\"#eb2f96\"\r\n                        onClick={onToggleLike}\r\n                    />,\r\n                    <Icon\r\n                        type=\"message\"\r\n                        key=\"message\"\r\n                        onClick={onToggleComment}\r\n                    />,\r\n                    <Popover\r\n                        key=\"ellipsis\"\r\n                        content={\r\n                            <Button.Group>\r\n                                {id && post.UserId === id ? (\r\n                                    <>\r\n                                        <Button>수정</Button>\r\n                                        <Button\r\n                                            type=\"danger\"\r\n                                            onClick={onRemovePost(post.id)}\r\n                                        >\r\n                                            삭제\r\n                                        </Button>\r\n                                    </>\r\n                                ) : (\r\n                                    <Button>신고</Button>\r\n                                )}\r\n                            </Button.Group>\r\n                        }\r\n                    >\r\n                        <Icon type=\"ellipsis\" />\r\n                    </Popover>\r\n                ]}\r\n                title={\r\n                    post.RetweetId\r\n                        ? `${post.User.nickname}님이 리트윗하셨습니다.`\r\n                        : null\r\n                }\r\n                extra={\r\n                    <FollowButton\r\n                        post={post}\r\n                        onUnfollow={onUnfollow}\r\n                        onFollow={onFollow}\r\n                    />\r\n                }\r\n            >\r\n                {post.RetweetId && post.Retweet ? (\r\n                    <Card\r\n                        cover={\r\n                            post.Retweet.Images[0] && (\r\n                                <PostImages images={post.Retweet.Images} />\r\n                            )\r\n                        }\r\n                    >\r\n                        <span style={{ float: \"right\" }}>\r\n                            {moment(post.createdAt).format(\"YYYY.MM.DD.\")}\r\n                        </span>\r\n                        <Card.Meta\r\n                            avatar={\r\n                                // 동적인 라우터일 땐 객체 방식으로 주소를 입력\r\n                                <Link\r\n                                    href={{\r\n                                        pathname: \"/user\",\r\n                                        query: { id: post.Retweet.User.id }\r\n                                    }}\r\n                                    as={`/user/${post.Retweet.User.id}`}\r\n                                >\r\n                                    <a>\r\n                                        <Avatar>\r\n                                            {post.Retweet.User.nickname[0]}\r\n                                        </Avatar>\r\n                                    </a>\r\n                                </Link>\r\n                            }\r\n                            title={post.Retweet.User.nickname}\r\n                            description={\r\n                                <PostCardContent\r\n                                    postData={post.Retweet.content}\r\n                                />\r\n                            }\r\n                        />\r\n                    </Card>\r\n                ) : (\r\n                    <Card.Meta\r\n                        avatar={\r\n                            // 동적인 라우터일 땐 객체 방식으로 주소를 입력\r\n                            <Link\r\n                                href={{\r\n                                    pathname: \"/user\",\r\n                                    query: { id: post.User.id }\r\n                                }}\r\n                                as={`/user/${post.User.id}`}\r\n                            >\r\n                                <a>\r\n                                    <Avatar>{post.User.nickname[0]}</Avatar>\r\n                                </a>\r\n                            </Link>\r\n                        }\r\n                        title={post.User.nickname}\r\n                        description={\r\n                            <PostCardContent postData={post.content} />\r\n                        }\r\n                    />\r\n                )}\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                    <CommentForm post={post} />\r\n                    <List\r\n                        header={`${\r\n                            post.Comments ? post.Comments.length : 0\r\n                        } 댓글`}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={post.Comments || []}\r\n                        renderItem={item => (\r\n                            <li>\r\n                                <Comment\r\n                                    author={item.User.nickname}\r\n                                    avatar={\r\n                                        <Link\r\n                                            href={{\r\n                                                pathname: \"/user/\",\r\n                                                query: { id: post.User.id }\r\n                                            }}\r\n                                            as={`/user/${post.User.id}`}\r\n                                        >\r\n                                            <a>\r\n                                                <Avatar>\r\n                                                    {item.User.nickname[0]}\r\n                                                </Avatar>\r\n                                            </a>\r\n                                        </Link>\r\n                                    }\r\n                                    content={item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </>\r\n            )}\r\n        </CardWrapper>\r\n    );\r\n});\r\n\r\nPostCard.propTypes = {\r\n    post: PropTypes.shape({\r\n        User: PropTypes.object,\r\n        content: PropTypes.string,\r\n        img: PropTypes.string,\r\n        createdAt: PropTypes.string\r\n    }).isRequired\r\n};\r\n\r\nexport default PostCard;\r\n"]},"metadata":{},"sourceType":"module"}