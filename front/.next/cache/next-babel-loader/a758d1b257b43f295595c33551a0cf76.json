{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useCallback, useState, useEffect, useRef } from \"react\";\nimport { Form, Input, Button, Card, Icon, Avatar } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from \"../reducers/post\";\n\nvar PostForm = function PostForm() {\n  var dispatch = useDispatch();\n\n  var _useState = useState(\"\"),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      isAddingPost = _useSelector.isAddingPost,\n      postAdded = _useSelector.postAdded;\n\n  var imageInput = useRef();\n  useEffect(function () {\n    setText(\"\");\n  }, [postAdded === true]);\n  var onSubmitForm = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!text || !text.trim()) {\n      return alert(\"게시글을 작성하세요.\");\n    }\n\n    var formData = new FormData();\n    imagePaths.forEach(function (i) {\n      formData.append(\"image\", i);\n    });\n    formData.append(\"content\", text);\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []);\n  var onChangeImages = useCallback(function (e) {\n    // console.log(e.target.files);\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append(\"image\", f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onRemoveImage = useCallback(function (index) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        index: index\n      });\n    };\n  }, []);\n  return __jsx(Form, {\n    encType: \"multipart/form-data\",\n    onSubmit: onSubmitForm,\n    style: {\n      margin: \"10px 0 20px\"\n    }\n  }, __jsx(Input.TextArea, {\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    value: text,\n    onChange: onChangeText\n  }), __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages\n  }), __jsx(Button, {\n    onClick: onClickImageUpload\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      \"float\": \"right\"\n    },\n    htmlType: \"submit\",\n    loading: isAddingPost\n  }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", null, imagePaths.map(function (v, i) {\n    return __jsx(\"div\", {\n      key: v,\n      style: {\n        display: \"inline-block\"\n      }\n    }, __jsx(\"img\", {\n      src: \"http://localhost:3065/\".concat(v),\n      style: {\n        width: \"200px\"\n      },\n      alt: v\n    }), __jsx(\"div\", null, __jsx(Button, {\n      onClick: onRemoveImage(i)\n    }, \"\\uC81C\\uAC70\")));\n  })));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["D:/project/react-nodebird/front/containers/PostForm.js"],"names":["React","useCallback","useState","useEffect","useRef","Form","Input","Button","Card","Icon","Avatar","useDispatch","useSelector","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","PostForm","dispatch","text","setText","state","post","imagePaths","isAddingPost","postAdded","imageInput","onSubmitForm","e","preventDefault","trim","alert","formData","FormData","forEach","i","append","type","data","onChangeText","target","value","onChangeImages","imageFormData","call","files","f","onClickImageUpload","current","click","onRemoveImage","index","margin","map","v","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useEffect, useRef } from \"react\";\r\nimport { Form, Input, Button, Card, Icon, Avatar } from \"antd\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    ADD_POST_REQUEST,\r\n    UPLOAD_IMAGES_REQUEST,\r\n    REMOVE_IMAGE\r\n} from \"../reducers/post\";\r\n\r\nconst PostForm = () => {\r\n    const dispatch = useDispatch();\r\n    const [text, setText] = useState(\"\");\r\n    const { imagePaths, isAddingPost, postAdded } = useSelector(\r\n        state => state.post\r\n    );\r\n    const imageInput = useRef();\r\n\r\n    useEffect(() => {\r\n        setText(\"\");\r\n    }, [postAdded === true]);\r\n\r\n    const onSubmitForm = useCallback(\r\n        e => {\r\n            e.preventDefault();\r\n            if (!text || !text.trim()) {\r\n                return alert(\"게시글을 작성하세요.\");\r\n            }\r\n            const formData = new FormData();\r\n            imagePaths.forEach(i => {\r\n                formData.append(\"image\", i);\r\n            });\r\n            formData.append(\"content\", text);\r\n            dispatch({\r\n                type: ADD_POST_REQUEST,\r\n                data: formData\r\n            });\r\n        },\r\n        [text, imagePaths]\r\n    );\r\n\r\n    const onChangeText = useCallback(e => {\r\n        setText(e.target.value);\r\n    }, []);\r\n\r\n    const onChangeImages = useCallback(e => {\r\n        // console.log(e.target.files);\r\n        const imageFormData = new FormData();\r\n        [].forEach.call(e.target.files, f => {\r\n            imageFormData.append(\"image\", f);\r\n        });\r\n        dispatch({\r\n            type: UPLOAD_IMAGES_REQUEST,\r\n            data: imageFormData\r\n        });\r\n    }, []);\r\n\r\n    const onClickImageUpload = useCallback(() => {\r\n        imageInput.current.click();\r\n    }, [imageInput.current]);\r\n\r\n    const onRemoveImage = useCallback(\r\n        index => () => {\r\n            dispatch({\r\n                type: REMOVE_IMAGE,\r\n                index\r\n            });\r\n        },\r\n        []\r\n    );\r\n\r\n    return (\r\n        <Form\r\n            encType=\"multipart/form-data\"\r\n            onSubmit={onSubmitForm}\r\n            style={{ margin: \"10px 0 20px\" }}\r\n        >\r\n            <Input.TextArea\r\n                maxLength={140}\r\n                placeholder=\"어떤 신기한 일이 있었나요?\"\r\n                value={text}\r\n                onChange={onChangeText}\r\n            />\r\n            <div>\r\n                <input\r\n                    type=\"file\"\r\n                    multiple\r\n                    hidden\r\n                    ref={imageInput}\r\n                    onChange={onChangeImages}\r\n                />\r\n                <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n                <Button\r\n                    type=\"primary\"\r\n                    style={{ float: \"right\" }}\r\n                    htmlType=\"submit\"\r\n                    loading={isAddingPost}\r\n                >\r\n                    짹짹\r\n                </Button>\r\n            </div>\r\n            <div>\r\n                {imagePaths.map((v, i) => (\r\n                    <div key={v} style={{ display: \"inline-block\" }}>\r\n                        <img\r\n                            src={`http://localhost:3065/${v}`}\r\n                            style={{ width: \"200px\" }}\r\n                            alt={v}\r\n                        />\r\n                        <div>\r\n                            <Button onClick={onRemoveImage(i)}>제거</Button>\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default PostForm;\r\n"]},"metadata":{},"sourceType":"module"}