{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport Head from \"next/head\";\nimport withRedux from \"next-redux-wrapper\";\nimport withReduxSaga from \"next-redux-saga\";\nimport { createStore, compose, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport axios from \"axios\";\nimport Helmet from \"react-helmet\"; // import App from 'next/app';\n\nimport AppLayout from \"../components/AppLayout\";\nimport reducer from \"../reducers\";\nimport rootSaga from \"../sagas\";\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\n\nconst Nodebird = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  // console.log(pageProps);\n  return __jsx(Provider, {\n    store: store\n  }, __jsx(Helmet, {\n    title: \"NodeBird\",\n    htmlAttributes: {\n      lang: \"ko\"\n    },\n    meta: [{\n      charset: \"UTF-8\"\n    }, {\n      name: \"viewport\",\n      content: \"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=yes,viewport-fit=cover\"\n    }, {\n      \"http-equiv\": \"X-UA-Compatible\",\n      content: \"IE=edge\"\n    }, {\n      name: \"description\",\n      content: \"팥우유의 NodeBird SNS\"\n    }, {\n      name: \"og:title\",\n      content: \"NodeBird\"\n    }, {\n      name: \"og:description\",\n      content: \"팥우유의 NodeBird SNS\"\n    }, {\n      property: \"og:type\",\n      content: \"website\"\n    }, {\n      property: \"og:image\",\n      content: \"http://localhost:3000/favicon.ico\"\n    }],\n    link: [{\n      rel: \"shortcut icon\",\n      href: \"/favicon.ico\"\n    }, {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.25.3/antd.css\"\n    }, {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"\n    }, {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"\n    }]\n  }), __jsx(AppLayout, null, __jsx(Component, pageProps)));\n};\n\n// getInitialProps\n// next에서 지원하는 react의 라이프 사이클같은 기능\n// 서버에서 받은 동적인 데이터를 프론트에서 사용할 수 있음.\n// react componentDidMount보다 더 빨리 실행됨.\n// 서버에서도 실행됨.\n// 서버 사이드 렌더링 작업을 할 때 용이함.\nNodebird.getInitialProps = async context => {\n  //context -> next에서 내려주는 것\n  // console.log(context);\n  const {\n    ctx,\n    Component\n  } = context;\n  let pageProps = {}; // store 안에 있는 로그인 정보를 getState 메서드를 통해 가져올 수 있음.\n\n  const state = ctx.store.getState(); // 클라이언트 -> 백엔드 서버간 통신할 땐 브라우저가 쿠키를 챙겨주나\n  // 서버와 서버간 통신일 땐 ex)프론트 서버(서버사이드 렌더링) - 백엔드 서버\n  // 개발자가 직접 쿠키를 전달해줘야 한다.\n\n  const cookie = ctx.isServer ? ctx.req.headers.cookie : \"\"; // console.log('쿠키', cookie);\n  // axios를 통해 프론트 서버에서 백엔드 서버로 쿠키를 직접 전달\n  //\n\n  if (ctx.isServer && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  if (!state.user.me) {\n    ctx.store.dispatch({\n      type: LOAD_USER_REQUEST\n    });\n  }\n\n  if (Component.getInitialProps) {\n    // Component에 getInitialProps가 있을 경우 실행\n    pageProps = (await Component.getInitialProps(ctx)) || {}; // Component 컴포넌트에 props 전달(실행)\n  }\n\n  return {\n    pageProps\n  };\n};\n\nconst configStore = (initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = [sagaMiddleware, store => next => action => {\n    // console.log(action);\n    next(action);\n  }];\n  const enhancer = true ? compose(applyMiddleware(...middlewares)) : compose( // middleware끼리 합성\n  applyMiddleware(...middlewares), !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\" // chrome redux devtools 사용 코드\n  ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer); // next에서 redux-saga를 이용해 서버사이드 렌더링을 가능하게 해주는 코드\n\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n}; // next-redux-saga -> next 서버에서 redux-saga를 사용할 수 있게 해주는 플러그인\n// next-redux-saga 설치 후 모든 프론트영역을 감싸는 코드영역의 export 코드를 감싸준다(고차 컴포넌트)\n// 고차 컴포넌트\n\n\nexport default withRedux(configStore)(withReduxSaga(Nodebird));","map":{"version":3,"sources":["D:/project/react-nodebird/front/pages/_app.js"],"names":["React","Head","withRedux","withReduxSaga","createStore","compose","applyMiddleware","Provider","createSagaMiddleware","axios","Helmet","AppLayout","reducer","rootSaga","LOAD_USER_REQUEST","Nodebird","Component","store","pageProps","lang","charset","name","content","property","rel","href","getInitialProps","context","ctx","state","getState","cookie","isServer","req","headers","defaults","Cookie","user","me","dispatch","type","configStore","initialState","options","sagaMiddleware","middlewares","next","action","enhancer","window","__REDUX_DEVTOOLS_EXTENSION__","f","sagaTask","run"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport Head from \"next/head\";\r\nimport Proptypes from \"prop-types\";\r\nimport withRedux from \"next-redux-wrapper\";\r\nimport withReduxSaga from \"next-redux-saga\";\r\nimport { createStore, compose, applyMiddleware } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport axios from \"axios\";\r\nimport Helmet from \"react-helmet\";\r\n// import App from 'next/app';\r\n\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport reducer from \"../reducers\";\r\nimport rootSaga from \"../sagas\";\r\nimport { LOAD_USER_REQUEST } from \"../reducers/user\";\r\n\r\nconst Nodebird = ({ Component, store, pageProps }) => {\r\n    // console.log(pageProps);\r\n    return (\r\n        <Provider store={store}>\r\n            <Helmet\r\n                title=\"NodeBird\"\r\n                htmlAttributes={{ lang: \"ko\" }}\r\n                meta={[\r\n                    {\r\n                        charset: \"UTF-8\"\r\n                    },\r\n                    {\r\n                        name: \"viewport\",\r\n                        content:\r\n                            \"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=yes,viewport-fit=cover\"\r\n                    },\r\n                    {\r\n                        \"http-equiv\": \"X-UA-Compatible\",\r\n                        content: \"IE=edge\"\r\n                    },\r\n                    {\r\n                        name: \"description\",\r\n                        content: \"팥우유의 NodeBird SNS\"\r\n                    },\r\n                    {\r\n                        name: \"og:title\",\r\n                        content: \"NodeBird\"\r\n                    },\r\n                    {\r\n                        name: \"og:description\",\r\n                        content: \"팥우유의 NodeBird SNS\"\r\n                    },\r\n                    {\r\n                        property: \"og:type\",\r\n                        content: \"website\"\r\n                    },\r\n                    {\r\n                        property: \"og:image\",\r\n                        content: \"http://localhost:3000/favicon.ico\"\r\n                    }\r\n                ]}\r\n                link={[\r\n                    {\r\n                        rel: \"shortcut icon\",\r\n                        href: \"/favicon.ico\"\r\n                    },\r\n                    {\r\n                        rel: \"stylesheet\",\r\n                        href:\r\n                            \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.25.3/antd.css\"\r\n                    },\r\n                    {\r\n                        rel: \"stylesheet\",\r\n                        href:\r\n                            \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"\r\n                    },\r\n                    {\r\n                        rel: \"stylesheet\",\r\n                        href:\r\n                            \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"\r\n                    }\r\n                ]}\r\n            />\r\n\r\n            <AppLayout>\r\n                <Component {...pageProps} />\r\n            </AppLayout>\r\n        </Provider>\r\n    );\r\n};\r\n\r\nNodebird.propTypes = {\r\n    Component: Proptypes.elementType.isRequired,\r\n    store: Proptypes.object.isRequired,\r\n    pageProps: Proptypes.object.isRequired\r\n};\r\n// getInitialProps\r\n// next에서 지원하는 react의 라이프 사이클같은 기능\r\n// 서버에서 받은 동적인 데이터를 프론트에서 사용할 수 있음.\r\n// react componentDidMount보다 더 빨리 실행됨.\r\n// 서버에서도 실행됨.\r\n// 서버 사이드 렌더링 작업을 할 때 용이함.\r\nNodebird.getInitialProps = async context => {\r\n    //context -> next에서 내려주는 것\r\n    // console.log(context);\r\n    const { ctx, Component } = context;\r\n    let pageProps = {};\r\n    // store 안에 있는 로그인 정보를 getState 메서드를 통해 가져올 수 있음.\r\n    const state = ctx.store.getState();\r\n    // 클라이언트 -> 백엔드 서버간 통신할 땐 브라우저가 쿠키를 챙겨주나\r\n    // 서버와 서버간 통신일 땐 ex)프론트 서버(서버사이드 렌더링) - 백엔드 서버\r\n    // 개발자가 직접 쿠키를 전달해줘야 한다.\r\n    const cookie = ctx.isServer ? ctx.req.headers.cookie : \"\";\r\n    // console.log('쿠키', cookie);\r\n    // axios를 통해 프론트 서버에서 백엔드 서버로 쿠키를 직접 전달\r\n    //\r\n    if (ctx.isServer && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n    if (!state.user.me) {\r\n        ctx.store.dispatch({\r\n            type: LOAD_USER_REQUEST\r\n        });\r\n    }\r\n    if (Component.getInitialProps) {\r\n        // Component에 getInitialProps가 있을 경우 실행\r\n        pageProps = (await Component.getInitialProps(ctx)) || {}; // Component 컴포넌트에 props 전달(실행)\r\n    }\r\n    return { pageProps };\r\n};\r\n\r\nconst configStore = (initialState, options) => {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const middlewares = [\r\n        sagaMiddleware,\r\n        store => next => action => {\r\n            // console.log(action);\r\n            next(action);\r\n        }\r\n    ];\r\n    const enhancer =\r\n        process.env.NODE_ENV === \"production\"\r\n            ? compose(applyMiddleware(...middlewares))\r\n            : compose(\r\n                  // middleware끼리 합성\r\n                  applyMiddleware(...middlewares),\r\n                  !options.isServer &&\r\n                      window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\" // chrome redux devtools 사용 코드\r\n                      ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n                      : f => f\r\n              );\r\n    const store = createStore(reducer, initialState, enhancer);\r\n    // next에서 redux-saga를 이용해 서버사이드 렌더링을 가능하게 해주는 코드\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    return store;\r\n};\r\n\r\n// next-redux-saga -> next 서버에서 redux-saga를 사용할 수 있게 해주는 플러그인\r\n// next-redux-saga 설치 후 모든 프론트영역을 감싸는 코드영역의 export 코드를 감싸준다(고차 컴포넌트)\r\n\r\n// 고차 컴포넌트\r\nexport default withRedux(configStore)(withReduxSaga(Nodebird));\r\n"]},"metadata":{},"sourceType":"module"}